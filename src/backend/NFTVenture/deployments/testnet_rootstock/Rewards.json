{
  "address": "0x9B9Ce3146B8Aa36Bc2FD1D764Ea27e5692C03C39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsCount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "individualPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct NewReward[]",
          "name": "rewards",
          "type": "tuple[]"
        }
      ],
      "name": "addRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "getRewardsForAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "individualPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardTokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Reward[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supervisor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5eba077a7286186bf2b0d94668206871a1628cbfa10b0899ce340003607e3ce",
  "receipt": {
    "to": null,
    "from": "0x2F59A1cf89c1124c79A86118A9339772c7F63EAF",
    "contractAddress": "0x9B9Ce3146B8Aa36Bc2FD1D764Ea27e5692C03C39",
    "transactionIndex": 3,
    "gasUsed": "2852028",
    "logsBloom": "0x
    "blockHash": "0xcfc6fced18c222bd671aa5bbbcb38a7f29db5ecc95d75c6f0411498a1866702d",
    "transactionHash": "0xf5eba077a7286186bf2b0d94668206871a1628cbfa10b0899ce340003607e3ce",
    "logs": [],
    "blockNumber": 5265577,
    "cumulativeGasUsed": "3208545",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49B430C6eCf01d31dfBD61A9f9444d94eE079AAA"
  ],
  "numDeployments": 1,
  "solcInputHash": "911df7b597bf5222e98b16d7123feb1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsCount\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct NewReward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getRewardsForAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Reward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supervisor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rewards.sol\":\"Rewards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155).interfaceId\\n            || interfaceId == type(IERC1155MetadataURI).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x8d0a3d2756dc8eff2b2563b52a6dcd3ab36e07b57211d3ac7c76efee6c4682e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x249bc2a6d919da5f5145950664134cfcf2f66874bda801fd3b8fb861783da079\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xc7aa8a96aaeb7e1672a3d5fd37582136ff46b6a6cafabcc40ec0e00a42915e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xf37ec99085370fa75da56456d21f8410423e64e6bc4ef31fed4884f70e5e40cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2ccdc162657b677334eb08a60bb50a0dd74b22eff7150abb06487f58dbebd5e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfb1161632a10d0bd366c80db583246fa490183b45ec4f59acb43b97d1a7437b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x3dce5847e70c056ef0f7cf91cb9a0067cf90784794017a45c1211cde7ed1c08c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd03f5c3d258a9b0f751a3246e0802106585561ab5909b808368759364fc786f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AssetStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nenum ProjectStatus {\\n    Started,\\n    Funded,\\n    Failed,\\n    Completed\\n}\\n\\nenum Category {\\n    Technology,\\n    Gaming,\\n    Music,\\n    Movies,\\n    Art\\n}\\n\\nstruct Reward {\\n    string title;\\n    string description;\\n    uint256 tokenAmount;\\n    uint256 individualPrice;\\n    uint256 availableTokens;\\n    uint256 rewardTokenId;\\n}\\n\\nstruct NewReward {\\n    string tokenURI;\\n    string title;\\n    string description;\\n    uint256 tokenAmount;\\n    uint256 individualPrice;\\n}\\n\\nstruct Asset {\\n    uint256 assetId;\\n    uint256 price;\\n    string author;\\n    string title;\\n    string description;\\n    uint256 projectStartDate;\\n    uint256 projectEndDate;\\n    Reward[] rewards;\\n    ProjectStatus status;\\n    address rewardTokenAddress;\\n    string mainPhoto;\\n    string[] secondaryPhotos;\\n    Category category;\\n}\\n\",\"keccak256\":\"0x2ffc38b9e3b4154b2c7ededb682535a9fd6dfb1419217873d7ff8c3dcbe3e9b4\",\"license\":\"MIT\"},\"contracts/FCTVToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FCTVToken is ERC1155, ERC1155Burnable, Ownable {\\n    string public name;\\n    string public symbol;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    constructor(string memory baseURI) ERC1155(baseURI) {\\n        name = \\\"Fractional CTV Tokens\\\";\\n        symbol = \\\"FCTVT\\\";\\n    }\\n\\n    function setURI(uint256 tokenId, string memory tokenURI) public onlyOwner {\\n        _tokenURIs[tokenId] = tokenURI;\\n    }\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return _tokenURIs[tokenId];\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        string memory tokenURI,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mint(to, id, amount, data);\\n        _tokenURIs[id] = tokenURI;\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        string[] memory tokenURIs,\\n        bytes memory data\\n    ) public onlyOwner {\\n        require(\\n            ids.length == tokenURIs.length,\\n            \\\"ERC1155: ids and uris length mismatch\\\"\\n        );\\n        _mintBatch(to, ids, amounts, data);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _tokenURIs[ids[i]] = tokenURIs[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ee303df696d07f5d8654739c54431b341abbf7b4456ac1b5d510ca9f7cffdb4\",\"license\":\"MIT\"},\"contracts/NFTVenture.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"./AssetStruct.sol\\\";\\n\\ncontract NFTVenture is\\n    ERC721,\\n    ERC721Enumerable,\\n    ERC721URIStorage,\\n    Pausable,\\n    Ownable,\\n    ERC721Burnable\\n{\\n    // Assets\\n    uint256 public assetsCount;\\n    mapping(uint256 => Asset) public assetMap;\\n    mapping(uint256 => bool) public assetExists;\\n\\n    mapping(address => uint256[]) public ownerToAssets;\\n\\n    mapping(uint256 => address) public assetApprovals;\\n    mapping(uint256 => address) public assetOwner;\\n    mapping(address => uint256) public ownedAssetsCount;\\n\\n    // State-based Asset IDs\\n    uint256[] public activeAssets;\\n    uint256[] public fundedAssets;\\n    uint256[] public failedAssets;\\n    uint256[] public completedAssets;\\n\\n    // Category-based Asset IDs\\n    mapping(Category => uint256[]) public categoryAssets;\\n\\n    // Investments\\n    mapping(uint256 => mapping(address => uint256)) public investmentAmountOf;\\n    mapping(uint256 => uint256) public investmentReceived;\\n    mapping(uint256 => address[]) public assetInvestors;\\n    mapping(uint256 => bool) public isTransferAllowed;\\n    mapping(uint256 => bool) public isRefundingAllowed;\\n    mapping(uint256 => uint256) public investmentRefunded;\\n    mapping(uint256 => mapping(address => uint256)) public pendingReturns;\\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256))) public investorTokens;\\n\\n    mapping(address => uint256[]) public investorAssets;\\n\\n    // Constructor\\n    constructor() ERC721(\\\"FractionalCTV\\\", \\\"FCTV\\\") {}\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function _burn(\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    modifier isNFTOwner(uint256 assetId) {\\n        require(msg.sender == ownerOf(assetId));\\n        _;\\n    }\\n\\n    function balanceOf() public view returns (uint256) {\\n        require(\\n            msg.sender != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return ownedAssetsCount[msg.sender];\\n    }\\n\\n    function ownerOf(\\n        uint256 assetId\\n    ) public view override(ERC721, IERC721) returns (address) {\\n        address owner = assetOwner[assetId];\\n        require(owner != address(0), \\\"NoAssetExists\\\");\\n        return owner;\\n    }\\n\\n    function approve(\\n        address to,\\n        uint256 assetId\\n    ) public override(ERC721, IERC721) {\\n        address owner = ownerOf(assetId);\\n        require(to != owner, \\\"CurrentOwnerApproval\\\");\\n        require(msg.sender == owner, \\\"NotTheAssetOwner\\\");\\n        assetApprovals[assetId] = to;\\n        emit Approval(owner, to, assetId);\\n    }\\n\\n    function getApproved(\\n        uint256 assetId\\n    ) public view override(ERC721, IERC721) returns (address) {\\n        require(\\n            _exists(assetId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n        return assetApprovals[assetId];\\n    }\\n\\n    function clearApproval(uint256 assetId, address approved) public {\\n        if (assetApprovals[assetId] == approved) {\\n            assetApprovals[assetId] = address(0);\\n        }\\n    }\\n\\n    function mint(address to, uint256 assetId, string memory asseturi) public {\\n        require(to != address(0), \\\"ZeroAddressMiniting\\\");\\n        _safeMint(to, assetId);\\n        _setTokenURI(assetId, asseturi);\\n        emit Transfer(address(0), to, assetId);\\n    }\\n\\n    function exists(uint256 assetId) public view returns (bool) {\\n        return assetExists[assetId];\\n    }\\n\\n    function isApprovedOrOwner(\\n        address spender,\\n        uint256 assetId\\n    ) external view returns (bool) {\\n        require(\\n            exists(assetId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(assetId);\\n        return (spender == owner || getApproved(assetId) == spender);\\n    }\\n\\n    function _addAsset(\\n        uint256 assetId,\\n        Asset memory asset,\\n        address to\\n    ) external {\\n        assetMap[assetId] = asset;\\n        assetOwner[assetId] = to;\\n        ownedAssetsCount[to]++;\\n        ownerToAssets[to].push(assetId);\\n        assetExists[assetId] = true;\\n        activeAssets.push(assetId);\\n        categoryAssets[asset.category].push(assetId);\\n    }\\n\\n    function getAsset(uint256 assetId) public view returns (Asset memory) {\\n        return assetMap[assetId];\\n    }\\n\\n    function updateAsset(uint256 assetId, Asset memory asset) public {\\n        assetMap[assetId] = asset;\\n    }\\n\\n    function getAssetsCount() public view returns (uint256) {\\n        return assetsCount;\\n    }\\n\\n    function incrementAssetsCount() public {\\n        assetsCount++;\\n    }\\n\\n    function getAssetsOfOwner(\\n        address owner\\n    ) public view returns (uint256[] memory) {\\n        return ownerToAssets[owner];\\n    }\\n\\n     function updateAssetReward(\\n        uint256 assetId,\\n        uint256 rewardIndex,\\n        uint256 newAvailableTokens\\n    ) external {\\n        require(\\n            rewardIndex < assetMap[assetId].rewards.length,\\n            \\\"Invalid reward index\\\"\\n        );\\n        assetMap[assetId]\\n            .rewards[rewardIndex]\\n            .availableTokens = newAvailableTokens;\\n    }\\n\\n    function handleRewardAddedToAsset(\\n        uint256 assetId,\\n        string memory title,\\n        string memory description,\\n        uint256 tokenAmount,\\n        uint256 individualPrice,\\n        bytes32 rewardId\\n    ) external {\\n        Asset storage asset = assetMap[assetId];\\n        asset.rewards.push(\\n            Reward({\\n                title: title,\\n                description: description,\\n                tokenAmount: tokenAmount,\\n                individualPrice: individualPrice,\\n                availableTokens: tokenAmount,\\n                rewardTokenId: uint256(rewardId)\\n            })\\n        );\\n    }\\n\\n    function updateRewardTokenAddress(\\n        uint256 assetId,\\n        address rewardTokenAddress\\n    ) external {\\n        assetMap[assetId].rewardTokenAddress = rewardTokenAddress;\\n    }\\n\\n    function addInvestment(\\n        uint256 assetId,\\n        address investor,\\n        uint256 amount\\n    ) external {\\n        investmentAmountOf[assetId][investor] += amount;\\n        investmentReceived[assetId] += amount;\\n    }\\n\\n    function addInvestor(uint256 assetId, address investor) external {\\n        assetInvestors[assetId].push(investor);\\n        investorAssets[investor].push(assetId);\\n    }\\n\\n    function getAssetInvestors(\\n        uint256 assetId\\n    ) external view returns (address[] memory) {\\n        return assetInvestors[assetId];\\n    }\\n\\n    function getInvestorAssets(\\n        address investor\\n    ) external view returns (uint256[] memory) {\\n        return investorAssets[investor];\\n    }\\n function getInvestorTokens(uint256 assetId, address investor) public view returns (uint256[] memory, uint256[] memory) {\\n    Asset memory asset = assetMap[assetId];\\n    uint256 rewardCount = asset.rewards.length;\\n\\n    uint256[] memory tokenIds = new uint256[](rewardCount);\\n    uint256[] memory tokenAmounts = new uint256[](rewardCount);\\n\\n    for (uint256 i = 0; i < rewardCount; i++) {\\n        uint256 tokenId = asset.rewards[i].rewardTokenId;\\n        tokenIds[i] = tokenId;\\n        tokenAmounts[i] = investorTokens[assetId][investor][tokenId];\\n    }\\n\\n    return (tokenIds, tokenAmounts);\\n}\\n\\n    function getInvestmentAmount(uint256 assetId, address investor) public view returns (uint256) {\\n        return investmentAmountOf[assetId][investor];\\n    }\\n\\n    function updateInvestorTokens(uint256 assetId, address investor, uint256 tokenId, uint256 tokenAmount) external {\\n        investorTokens[assetId][investor][tokenId] = tokenAmount;\\n    }\\n\\n    function allowTransfers(uint256 assetId, bool allowed) external {\\n        isTransferAllowed[assetId] = allowed;\\n    }\\n\\n    function allowRefunding(uint256 assetId, bool allowed) external {\\n        isRefundingAllowed[assetId] = allowed;\\n    }\\n\\n    function updatePendingReturns(uint256 assetId, address investor, uint256 amount) external {\\n        pendingReturns[assetId][investor] = amount;\\n    }\\n\\n    function updateInvestmentRefunded(uint256 assetId, uint256 amount) external {\\n        investmentRefunded[assetId] = amount;\\n    }\\n\\n    function getActiveAssets() external view returns (uint256[] memory) {\\n        return activeAssets;\\n    }\\n\\n    function getFundedAssets() external view returns (uint256[] memory) {\\n        return fundedAssets;\\n    }\\n\\n    function getFailedAssets() external view returns (uint256[] memory) {\\n        return failedAssets;\\n    }\\n\\n    function getCompletedAssets() external view returns (uint256[] memory) {\\n        return completedAssets;\\n    }\\n\\n    function getAssetsByCategory(Category category) external view returns (uint256[] memory) {\\n        return categoryAssets[category];\\n    }\\n}\\n\",\"keccak256\":\"0xc8afdd4632aab2065bb17fb3479171083eafafca32d38d9c0544ccfd9b182327\",\"license\":\"MIT\"},\"contracts/Rewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nimport \\\"./FCTVToken.sol\\\";\\nimport \\\"./NFTVenture.sol\\\";\\nimport \\\"./AssetStruct.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\ncontract Rewards is ERC1155Holder  {\\n     NFTVenture private nftContract;\\n    address public supervisor;\\n\\n    //Events\\n    event RewardsAdded(uint256 indexed assetId, uint256 rewardsCount);\\n\\n    // Constructor\\n    constructor(address nftAddress) {\\n        nftContract = NFTVenture(nftAddress);\\n        supervisor = msg.sender;\\n    }\\n\\n    modifier onlySupervisor() {\\n        require(msg.sender == supervisor, \\\"Only supervisor can call this function\\\");\\n        _;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////\\n    // Functions Rewards //\\n    ////////////////////////////////////////////////////////////////////////////////\\n\\n    function addRewards(uint256 assetId, NewReward[] memory rewards) public onlySupervisor {\\n        require(nftContract.exists(assetId), \\\"Asset does not exist\\\");\\n        Asset memory asset = nftContract.getAsset(assetId);\\n\\n        if (asset.rewardTokenAddress == address(0)) {\\n            FCTVToken rewardToken = new FCTVToken(\\\"\\\");\\n            asset.rewardTokenAddress = address(rewardToken);\\n            nftContract.updateRewardTokenAddress(assetId, address(rewardToken));\\n        }\\n\\n        FCTVToken rewardTokenContract = FCTVToken(asset.rewardTokenAddress);\\n\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            bytes32 rewardId = keccak256(abi.encodePacked(assetId, i));\\n            rewardTokenContract.mint(\\n                address(this),\\n                uint256(rewardId),\\n                rewards[i].tokenAmount,\\n                rewards[i].tokenURI,\\n                \\\"\\\"\\n            );\\n\\n            nftContract.handleRewardAddedToAsset(assetId, rewards[i].title, rewards[i].description, rewards[i].tokenAmount, rewards[i].individualPrice, rewardId);\\n        }\\n\\n        emit RewardsAdded(assetId, rewards.length);\\n    }\\n\\n    function getRewardsForAsset(uint256 assetId) public view returns (Reward[] memory) {\\n        Asset memory asset = nftContract.getAsset(assetId);\\n        return asset.rewards;\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xea99f695e08a9dbf394a0b627787f0c9c82f2c473d048de20bff3b457f66c8b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007c57601f61327738819003918201601f19168301916001600160401b038311848410176100815780849260209460405283398101031261007c57516001600160a01b0381169081900361007c5760018060a01b031990816000541617600055339060015416176001556040516131df90816100988239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60808060405260043610156200001457600080fd5b600090813560e01c90816301ffc9a714620008d85750806356e4b68b14620008ad578063660486ff14620002995780638bfa795d146200016b578063bc197c8114620000cf5763f23a6e61146200006a57600080fd5b34620000cc5760a0366003190112620000cc576200008762000a3c565b506200009262000a53565b506084356001600160401b038111620000c857620000b59036906004016200099e565b5060405163f23a6e6160e01b8152602090f35b5080fd5b80fd5b5034620000cc5760a0366003190112620000cc57620000ed62000a3c565b50620000f862000a53565b506001600160401b0360443581811162000167576200011c90369060040162000a6a565b5060643581811162000167576200013890369060040162000a6a565b50608435908111620000c857620001549036906004016200099e565b5060405163bc197c8160e01b8152602090f35b8280fd5b5034620000cc57602080600319360112620000c8578154604051631d591eb760e31b81526004803590820152908390829060249082906001600160a01b03165afa80156200028e5760e091849162000267575b5001516040805183815282518185018190529093600582901b850183019381019285015b828710620001f05785850386f35b909192938280600192603f198982030185528751906200022e6200021d835160c080855284019062000a15565b848401518382038685015262000a15565b9160408101516040830152606080820151908301526080808201519083015260a0809101519101529601920196019592919092620001e2565b6200028791503d8086833e6200027e818362000946565b81019062000b1d565b38620001be565b6040513d85823e3d90fd5b5034620000cc576040366003190112620000cc576001600160401b0390602435828111620000c85736602382011215620000c8578060040135620002dd816200096a565b91620002ed604051938462000946565b8183526024602084019260051b82010190368211620005c15760248101925b828410620007d15750506001546001600160a01b0316330391506200077d9050578154604051634f558e7960e01b815260048035908201526001600160a01b0390911690602081602481855afa908115620006c25784916200073b575b5015620006ff578260249160405192838092631d591eb760e31b825260043560048301525afa9081156200028e5790610120918491620006e1575b500180516001600160a01b0316156200061e575b516001600160a01b031690825b8151811015620005ea5760405160208101906004358252826040820152604081526060810181811088821117620005d45760405251902060606200040a838562000e02565b51015162000419838562000e02565b515190853b15620005d057869060206200045f60405194859363a4b645eb60e01b8552306004860152876024860152604485015260a0606485015260a484019062000a15565b83838203916003198301608486015252018183895af18015620005c557908691620005a9575b505084546001600160a01b03166020620004a0848662000e02565b5101516040620004b1858762000e02565b510151926060620004c3868862000e02565b510151906080620004d5878962000e02565b510151843b15620005a5576200053195938a95936200051e938793604051998a9889978896630fe6a85560e21b8852600435600489015260c0602489015260c488019062000a15565b8681036003190160448801529062000a15565b926064850152608484015260a483015203925af180156200059a579085916200057e575b505060001981146200056a57600101620003c5565b634e487b7160e01b84526011600452602484fd5b620005899062000932565b6200059657833862000555565b8380fd5b6040513d87823e3d90fd5b8980fd5b620005b49062000932565b620005c157843862000485565b8480fd5b6040513d88823e3d90fd5b8680fd5b634e487b7160e01b600052604160045260246000fd5b8382516040519081527f40df43107e8b4d467127964bd3c966687c0a6a39aaede970755397fd09535e98602060043592a280f35b60405161237c8082019082821087831117620006cd57604091839162000e2e83396020815286602082015203019084f080156200028e576001600160a01b03908116808352845490911690813b15620005c1578491604483926040519485938492633489952160e01b8452600435600485015260248401525af18015620006c257620006ac575b50620003b8565b620006ba9093919362000932565b9138620006a5565b6040513d86823e3d90fd5b634e487b7160e01b86526041600452602486fd5b620006f891503d8086833e6200027e818362000946565b38620003a4565b60405162461bcd60e51b8152602060048201526014602482015273105cdcd95d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b90506020813d60201162000774575b81620007596020938362000946565b81010312620005965751801515810362000596573862000369565b3d91506200074a565b60405162461bcd60e51b815260206004820152602660248201527f4f6e6c792073757065727669736f722063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b6064820152608490fd5b8335878111620005d057820160a090816023198236030112620008a9576040519182018281108a8211176200089557604052602481013589811162000891576200082290602436918401016200099e565b8252604481013589811162000891576200084390602436918401016200099e565b6020830152606481013589811162000891579160a4602094926200086f8695602436918401016200099e565b604084015260848101356060840152013560808201528152019301926200030c565b8880fd5b634e487b7160e01b89526041600452602489fd5b8780fd5b5034620000cc5780600319360112620000cc576001546040516001600160a01b039091168152602090f35b905034620000c8576020366003190112620000c85760043563ffffffff60e01b8116809103620001675760209250630271189760e51b811490811562000920575b5015158152f35b6301ffc9a760e01b1490503862000919565b6001600160401b038111620005d457604052565b601f909101601f19168101906001600160401b03821190821017620005d457604052565b6001600160401b038111620005d45760051b60200190565b6001600160401b038111620005d457601f01601f191660200190565b81601f82011215620009eb57803590620009b88262000982565b92620009c8604051948562000946565b82845260208383010111620009eb57816000926020809301838601378301015290565b600080fd5b60005b83811062000a045750506000910152565b8181015183820152602001620009f3565b9060209162000a3081518092818552858086019101620009f0565b601f01601f1916010190565b600435906001600160a01b0382168203620009eb57565b602435906001600160a01b0382168203620009eb57565b81601f82011215620009eb5780359162000a84836200096a565b9262000a94604051948562000946565b808452602092838086019260051b820101928311620009eb578301905b82821062000ac0575050505090565b8135815290830190830162000ab1565b81601f82011215620009eb57805162000ae98162000982565b9262000af9604051948562000946565b81845260208284010111620009eb5762000b1a9160208085019101620009f0565b90565b6020918282820312620009eb5781516001600160401b0392838211620009eb5701916101a0938484840312620009eb57604092835195860186811084821117620005d457845284518652818501518287015283850151838111620009eb578162000b8991870162000ad0565b84870152606080860151848111620009eb578262000ba991880162000ad0565b81880152608080870151858111620009eb578362000bc991890162000ad0565b8189015260a09081880151828a015260c09182890151838b015260e0890151878111620009eb5789019285601f85011215620009eb5783519262000c0d846200096a565b9562000c1c8b51978862000946565b848752888088019560051b87010195888711620009eb57898101955b87871062000d4957505050505050505060e087015261010080860151906004821015620009eb5787015261012085810151906001600160a01b0382168203620009eb5787015261014080860151848111620009eb578262000c9b91880162000ad0565b908701526101609283860151818111620009eb5786019082601f83011215620009eb5781519062000cda62000cd0836200096a565b9751978862000946565b818752848088019260051b84010193808511620009eb57858401925b85841062000d20575050505050505083015261018080910151906005821015620009eb5782015290565b8351838111620009eb57879162000d3d848480948a010162000ad0565b81520193019262000cf6565b86518c8111620009eb57820185601f19828d030112620009eb578d5186810192908e84118185101762000ded57928f52818d0151928e8411620009eb578f8f948f8f9062000d9a9287010162000ad0565b8252830151938411620009eb578f838f95918f62000dbf90888d958199010162000ad0565b86850152888201519084015288810151888401528a8101518984015201518982015281520196019562000c38565b60246000634e487b7160e01b81526041600452fd5b805182101562000e175760209160051b010190565b634e487b7160e01b600052603260045260246000fdfe608060405234620002bb576200237c803803806200001d81620002c0565b9283398101906020918282820312620002bb5781516001600160401b0392838211620002bb570191601f91808385011215620002bb578351938285116200029157601f19946200007385820187168801620002c0565b92818452878284010111620002bb57869160005b828110620002a7575050906000918301015280519182116200029157620000b0600254620002e6565b83811162000253575b508493838311600114620001ec575092819293600092620001e0575b50508160011b916000199060031b1c1916176002555b600380546001600160a01b0319163390811790915560007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a362000133600454620002e6565b818111620001bc575b507f4672616374696f6e616c2043545620546f6b656e73000000000000000000002a6004556005546200016f90620002e6565b9080821162000198575b600a641190d5159560da1b0160055560405161203f90816200033d8239f35b620001b3926005600052600020910160051c81019062000323565b38808062000179565b620001d99060046000528284600020910160051c81019062000323565b386200013c565b015190503880620000d5565b8216936002600052856000209160005b878782106200023c57505083600195961062000222575b505050811b01600255620000eb565b015160001960f88460031b161c1916905538808062000213565b6001849582939585015181550194019201620001fc565b62000280906002600052866000208580860160051c82019289871062000287575b0160051c019062000323565b38620000b9565b9250819262000274565b634e487b7160e01b600052604160045260246000fd5b818101840151858201850152830162000087565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200029157604052565b90600182811c9216801562000318575b60208310146200030257565b634e487b7160e01b600052602260045260246000fd5b91607f1691620002f6565b8181106200032f575050565b600081556001016200032356fe6040608081526004908136101561001557600080fd5b600091823560e01c908162fdd58e1461182057816301ffc9a7146117b257816306fdde03146116ff5781630e89341c146116265781632eb2c2d6146113425781634e1273f4146111ad5781636b20c45414611069578163715018a61461101a578163862440e214610eed5781638da5cb5b14610ec457816395d89b4114610ddf578163a22cb46514610d01578163a4b645eb146109f4578163b9571e8414610539578163e985e9c5146104e7578163f242432a1461028d578163f2fde38b146101d2575063f5298aca146100e857600080fd5b8190346101cf5760603660031901126101cf57610103611850565b6001600160a01b03169060243590600080516020611fca8339815191529060443533851480156101b0575b61013790611bc8565b610142851515611ea3565b61014b84611e6e565b5061015581611e6e565b50858251610162816118bb565b528386528560205281862085875260205261018c818388205461018782821015611efb565b611c85565b8487528660205282872086885260205282872055815193845260208401523392a480f35b508486526001602090815282872033885290528186205460ff1661012e565b50fd5b905034610289576020366003190112610289576101ed611850565b600354916001600160a01b0380841692610208338514611a4e565b169384156102375750508290600080516020611fea8339815191528580a36001600160a01b0319161760035580f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b919050346102895760a0366003190112610289576102a9611850565b836102b261186b565b916044356064356084356001600160401b0381116104e3576102d790369089016119c4565b926001600160a01b03868116916102ef831515611b6e565b169233841480156104c4575b61030490611bc8565b61030d81611e6e565b5061031783611e6e565b50808652602096868852888720858852885261033d848a89205461018782821015611c26565b828852878952898820868952895289882055818752868852888720838852885288872061036b858254611c92565b905582858a51848152868b820152600080516020611fca8339815191528c3392a43b610395578580f35b889587946103d68a519788968795869463f23a6e6160e01b9c8d8752339087015260248601526044850152606484015260a0608484015260a483019061190f565b03925af1869181610495575b506104645750506001906103f4611d8d565b6308c379a014610431575b506104145750505b3880808381808080808580f35b5162461bcd60e51b81529150819061042d908201611e19565b0390fd5b610439611dab565b8061044457506103ff565b61042d8591855193849362461bcd60e51b8552840152602483019061190f565b6001600160e01b03191603905061047c575050610407565b5162461bcd60e51b81529150819061042d908201611d44565b6104b6919250843d86116104bd575b6104ae81836118ec565b810190611d24565b90386103e2565b503d6104a4565b508386526001602090815288872033885290528786205460ff166102fb565b8480fd5b50503461053557806003193601126105355760ff81602093610507611850565b61050f61186b565b6001600160a01b0391821683526001875283832091168252855220549151911615158152f35b5080fd5b905034610289576003199160a0368401126109f057610556611850565b6024946001600160401b039490919086358681116109f05761057b9036908701611966565b946044358781116104e3576105939036908301611966565b96606435938185116109ec57366023860112156109ec5784830135996105b88b61194f565b946105c5895196876118ec565b8b86526020968787018360059e8f1b830101913683116109e857848101915b8383106109be57505050506084358481116109ba5761060690369087016119c4565b60018060a01b039360039461061f818754163314611a4e565b8c5189510361096957906106508d9a9997959f98969493928f9083169b6106478d1515611f53565b51905114611c9f565b8a5b8d518110156106b157908e9f9392918e9f908f8f8f908f918f9261069e9361068887610681816106a59b611b44565b5197611b44565b5183528281528383209183525220918254611c92565b9055611b1f565b909192939f9e50610652565b508e8c8f8f95908c8f968f888d95888c94869b858588600080516020611faa8339815191526106e88f8e9051918291339583611cfc565b0390a43b610847575b5050509450505050505b85518110156108435761070e818b611b44565b516107198288611b44565b51865260068552828620908051908a8211610831578d9061073a8454611881565b601f928382116107f1575b505087918311600114610789576107799493929189918361077e575b50508160011b91600019908c1b1c1916179055611b1f565b6106fb565b015190508f80610761565b8389528789209190601f1984168a5b8a8282106107db5750509084610779979695949392106107c3575b505050600190811b019055611b1f565b0151600019838d1b60f8161c191690558e80806107b3565b6001859682939686015181550195019301610798565b858b52898b209084808701821c8301938c8810610828575b01901c01905b81811061081d57508f610745565b8a815560010161080f565b93508293610809565b634e487b7160e01b885260418c528588fd5b8480f35b83928a519889978896879563bc197c8160e01b9d8e885233908801528601526044850160a0905260a4850161087b91611a1a565b8285820301606486015261088e91611a1a565b908382030160848401526108a19161190f565b03925af186918161094a575b5061092557505060016108be611d8d565b6308c379a0146108f2575b6108dc575b878b848782888188816106f1565b5162461bcd60e51b81528061042d818a01611e19565b6108fa611dab565b8061090557506108c9565b9050889261042d925194859462461bcd60e51b865285015283019061190f565b6001600160e01b031916146108ce575162461bcd60e51b81528061042d818a01611d44565b610962919250863d88116104bd576104ae81836118ec565b908d6108ad565b508a5162461bcd60e51b81528088018a90526025818601527f455243313135353a2069647320616e642075726973206c656e677468206d69736044820152640dac2e8c6d60db1b6064820152608490fd5b8880fd5b82358881116109e4578b916109d983928936918701016119c4565b8152019201916105e4565b8c80fd5b8a80fd5b8580fd5b8380fd5b839150346105355760a036600319011261053557610a10611850565b604435936001600160401b039190602435606435848111610cfd57610a3890369087016119c4565b96608435858111610cf95790610a528792369084016119c4565b9460018060a01b03610a6981600354163314611a4e565b811695610a77871515611f53565b610a8085611e6e565b50610a8a83611e6e565b50848a5260209687928b8452878c20828d528452878c20610aac868254611c92565b9055818c89518981528787820152600080516020611fca8339815191528b3392a43b610bf1575b50505050508552600682528420928551928311610bde5750610af58354611881565b601f8111610b9b575b5080601f8311600114610b395750839482939492610b2e575b50508160011b916000199060031b1c191617905580f35b015190508480610b17565b90601f198316958486528286209286905b888210610b8357505083600195969710610b6a575b505050811b01905580f35b015160001960f88460031b161c19169055848080610b5f565b80600185968294968601518155019501930190610b4a565b838552818520601f840160051c810191838510610bd4575b601f0160051c01905b818110610bc95750610afe565b858155600101610bbc565b9091508190610bb3565b634e487b7160e01b855260419052602484fd5b610c31938b885180968195829463f23a6e6160e01b9a8b855233908501528460248501528b6044850152606484015260a0608484015260a483019061190f565b03925af1889181610cda575b50610cb45750506001610c4e611d8d565b6308c379a014610c7f575b610c68575b8488848180610ad3565b815162461bcd60e51b81528061042d818801611e19565b610c87611dab565b80610c925750610c59565b835162461bcd60e51b815280880186905290819061042d90602483019061190f565b6001600160e01b03191614610c5e57815162461bcd60e51b81528061042d818801611d44565b610cf2919250863d88116104bd576104ae81836118ec565b908a610c3d565b8780fd5b8680fd5b91905034610289578060031936011261028957610d1c611850565b90602435918215158093036104e3576001600160a01b031692338414610d8b5750338452600160205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b6020608492519162461bcd60e51b8352820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152fd5b50503461053557816003193601126105355780519082600554610e0181611881565b80855290600190818116908115610e9c5750600114610e43575b505050610e2d82610e3f9403836118ec565b5191829160208352602083019061190f565b0390f35b60058352602095507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410610e895750505082610e3f94610e2d9282010194610e1b565b8054868501880152928601928101610e6d565b610e3f9750610e2d9450602092508693915060ff191682840152151560051b82010194610e1b565b50503461053557816003193601126105355760035490516001600160a01b039091168152602090f35b839150346105355782600319360112610535576001600160401b036024358181116109f057610f1f90369084016119c4565b93610f3560018060a01b03600354163314611a4e565b82358452602090600682528420928551928311610bde5750610f578354611881565b601f8111610fd7575b5080601f8311600114610f8f5750839482939492610b2e5750508160011b916000199060031b1c191617905580f35b90601f198316958486528286209286905b888210610fbf57505083600195969710610b6a57505050811b01905580f35b80600185968294968601518155019501930190610fa0565b838552818520601f840160051c810191838510611010575b601f0160051c01905b8181106110055750610f60565b858155600101610ff8565b9091508190610fef565b8334611066578060031936011261106657600354816001600160a01b038216611044338214611a4e565b600080516020611fea8339815191528280a36001600160a01b03191660035580f35b80fd5b9190503461028957606036600319011261028957611085611850565b906001600160401b036024358181116109ec576110a59036908601611966565b936044359182116109ec576110bc91369101611966565b916001600160a01b0316338114801561118e575b6110d990611bc8565b6110e4811515611ea3565b6110f18451845114611c9f565b8482516110fd816118bb565b52845b8585518210156111655750806111196111609287611b44565b516111248287611b44565b518189526111496020918a8352878b20878c528352878b205461018782821015611efb565b91895288815285892090858a525284882055611b1f565b611100565b808387600080516020611faa833981519152611188898951918291339583611cfc565b0390a480f35b508085526001602090815282862033875290528185205460ff166110d0565b90503461028957816003193601126102895780356001600160401b038082116104e357366023830112156104e35781830135906111e98261194f565b926111f6865194856118ec565b82845260209260248486019160051b830101913683116109ba57602401905b82821061131f575050506024359081116109ec576112369036908501611966565b9282518451036112cc575081519461124d8661194f565b9561125a865197886118ec565b808752611269601f199161194f565b0136838801375b82518110156112ba576112b5906112a56001600160a01b036112928387611b44565b511661129e8388611b44565b5190611a99565b6112af8289611b44565b52611b1f565b611270565b845182815280610e3f81850189611a1a565b60849185519162461bcd60e51b8352820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152fd5b81356001600160a01b038116810361133e578152908401908401611215565b8980fd5b905034610289576003199160a0368401126109f05761135f611850565b61136761186b565b936001600160401b0393604435858111610cf9576113889036908301611966565b906064358681116109ba576113a09036908301611966565b956084359081116109ba576113b890369083016119c4565b926113c68351885114611c9f565b6001600160a01b03888116956113dd871515611b6e565b16933385148015611608575b156115aa57895b8a855182101561146e57908961069e8a6114699461141985611412818d611b44565b5195611b44565b51938082526020908282528383208d84528252611440868585205461018782821015611c26565b8184528383528d8585209085528352848420558252818152828220908d83525220918254611c92565b6113f0565b5050909493959692919784878951600080516020611faa8339815191523391806114998a8a83611cfc565b0390a43b6114a5578880f35b8651948593849363bc197c8160e01b98898652338c87015260248601526044850160a0905260a485016114d791611a1a565b828582030160648601526114ea91611a1a565b908382030160848401526114fd9161190f565b0381885a94602095f185918161158a575b50611574575050600161151f611d8d565b6308c379a01461153d575b6104145750505b38808080808080808880f35b611545611dab565b80611550575061152a565b905061042d91602094505193849362461bcd60e51b8552840152602483019061190f565b6001600160e01b0319160361047c575050611531565b6115a391925060203d81116104bd576104ae81836118ec565b903861150e565b865162461bcd60e51b8152602081850152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608490fd5b50848a526001602052868a20338b5260205260ff878b2054166113e9565b9190503461028957602091826003193601126109f0573583526006825280832081519384918181549061165882611881565b928386526001928884821691826000146116d5575050600114611697575b8588610e3f89611688848a03856118ec565b5192828493845283019061190f565b87945081939291528383205b8284106116bd5750505082010181611688610e3f38611676565b8054848a0186015288955087949093019281016116a3565b60ff19168882015294151560051b870190940194508593506116889250610e3f9150389050611676565b8383346105355781600319360112610535578051918093805461172181611881565b80865291600191808316908115611787575060011461174c575b610e3f8686610e2d828b03836118ec565b835260208084209096505b8284106117745750505082610e3f94610e2d92820101948661173b565b8054868501880152928601928101611757565b9050610e3f9750610e2d9450602092508693915060ff191682840152151560051b820101948661173b565b90503461028957602036600319011261028957359063ffffffff60e01b82168092036102895760209250636cdb3d1360e11b821491821561180f575b82156117fe575b50519015158152f35b6301ffc9a760e01b149150386117f5565b6303a24d0760e21b811492506117ee565b505034610535578060031936011261053557602090611849611840611850565b60243590611a99565b9051908152f35b600435906001600160a01b038216820361186657565b600080fd5b602435906001600160a01b038216820361186657565b90600182811c921680156118b1575b602083101461189b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611890565b602081019081106001600160401b038211176118d657604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176118d657604052565b919082519283825260005b84811061193b575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161191a565b6001600160401b0381116118d65760051b60200190565b81601f820112156118665780359161197d8361194f565b9261198b60405194856118ec565b808452602092838086019260051b820101928311611866578301905b8282106119b5575050505090565b813581529083019083016119a7565b81601f82011215611866578035906001600160401b0382116118d657604051926119f8601f8401601f1916602001856118ec565b8284526020838301011161186657816000926020809301838601378301015290565b90815180825260208080930193019160005b828110611a3a575050505090565b835185529381019392810192600101611a2c565b15611a5557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b0316908115611ac657600052600060205260406000209060005260205260406000205490565b60405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608490fd5b6000198114611b2e5760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015611b585760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b15611b7557565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b15611bcf57565b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608490fd5b15611c2d57565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b91908203918211611b2e57565b91908201809211611b2e57565b15611ca657565b60405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b9091611d13611d2193604084526040840190611a1a565b916020818403910152611a1a565b90565b9081602091031261186657516001600160e01b0319811681036118665790565b60809060208152602860208201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b60608201520190565b60009060033d11611d9a57565b905060046000803e60005160e01c90565b600060443d10611d2157604051600319913d83016004833e81516001600160401b03918282113d602484011117611e0857818401948551938411611e10573d85010160208487010111611e085750611d21929101602001906118ec565b949350505050565b50949350505050565b60809060208152603460208201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60608201520190565b60408051919082016001600160401b038111838210176118d65760405260018252602082016020368237825115611b58575290565b15611eaa57565b60405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b15611f0257565b60405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608490fd5b15611f5a57565b60405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608490fdfe4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fbc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220661f93ef58911c552407a294425731cd6da151104af99e286490ae3ea5beb00a64736f6c63430008130033a2646970667358221220b037d9c6d8fd2b286ba81910930e92430f44390a6082ef5cc9a772f493244e4d64736f6c63430008130033",
  "deployedBytecode": "0x60808060405260043610156200001457600080fd5b600090813560e01c90816301ffc9a714620008d85750806356e4b68b14620008ad578063660486ff14620002995780638bfa795d146200016b578063bc197c8114620000cf5763f23a6e61146200006a57600080fd5b34620000cc5760a0366003190112620000cc576200008762000a3c565b506200009262000a53565b506084356001600160401b038111620000c857620000b59036906004016200099e565b5060405163f23a6e6160e01b8152602090f35b5080fd5b80fd5b5034620000cc5760a0366003190112620000cc57620000ed62000a3c565b50620000f862000a53565b506001600160401b0360443581811162000167576200011c90369060040162000a6a565b5060643581811162000167576200013890369060040162000a6a565b50608435908111620000c857620001549036906004016200099e565b5060405163bc197c8160e01b8152602090f35b8280fd5b5034620000cc57602080600319360112620000c8578154604051631d591eb760e31b81526004803590820152908390829060249082906001600160a01b03165afa80156200028e5760e091849162000267575b5001516040805183815282518185018190529093600582901b850183019381019285015b828710620001f05785850386f35b909192938280600192603f198982030185528751906200022e6200021d835160c080855284019062000a15565b848401518382038685015262000a15565b9160408101516040830152606080820151908301526080808201519083015260a0809101519101529601920196019592919092620001e2565b6200028791503d8086833e6200027e818362000946565b81019062000b1d565b38620001be565b6040513d85823e3d90fd5b5034620000cc576040366003190112620000cc576001600160401b0390602435828111620000c85736602382011215620000c8578060040135620002dd816200096a565b91620002ed604051938462000946565b8183526024602084019260051b82010190368211620005c15760248101925b828410620007d15750506001546001600160a01b0316330391506200077d9050578154604051634f558e7960e01b815260048035908201526001600160a01b0390911690602081602481855afa908115620006c25784916200073b575b5015620006ff578260249160405192838092631d591eb760e31b825260043560048301525afa9081156200028e5790610120918491620006e1575b500180516001600160a01b0316156200061e575b516001600160a01b031690825b8151811015620005ea5760405160208101906004358252826040820152604081526060810181811088821117620005d45760405251902060606200040a838562000e02565b51015162000419838562000e02565b515190853b15620005d057869060206200045f60405194859363a4b645eb60e01b8552306004860152876024860152604485015260a0606485015260a484019062000a15565b83838203916003198301608486015252018183895af18015620005c557908691620005a9575b505084546001600160a01b03166020620004a0848662000e02565b5101516040620004b1858762000e02565b510151926060620004c3868862000e02565b510151906080620004d5878962000e02565b510151843b15620005a5576200053195938a95936200051e938793604051998a9889978896630fe6a85560e21b8852600435600489015260c0602489015260c488019062000a15565b8681036003190160448801529062000a15565b926064850152608484015260a483015203925af180156200059a579085916200057e575b505060001981146200056a57600101620003c5565b634e487b7160e01b84526011600452602484fd5b620005899062000932565b6200059657833862000555565b8380fd5b6040513d87823e3d90fd5b8980fd5b620005b49062000932565b620005c157843862000485565b8480fd5b6040513d88823e3d90fd5b8680fd5b634e487b7160e01b600052604160045260246000fd5b8382516040519081527f40df43107e8b4d467127964bd3c966687c0a6a39aaede970755397fd09535e98602060043592a280f35b60405161237c8082019082821087831117620006cd57604091839162000e2e83396020815286602082015203019084f080156200028e576001600160a01b03908116808352845490911690813b15620005c1578491604483926040519485938492633489952160e01b8452600435600485015260248401525af18015620006c257620006ac575b50620003b8565b620006ba9093919362000932565b9138620006a5565b6040513d86823e3d90fd5b634e487b7160e01b86526041600452602486fd5b620006f891503d8086833e6200027e818362000946565b38620003a4565b60405162461bcd60e51b8152602060048201526014602482015273105cdcd95d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b90506020813d60201162000774575b81620007596020938362000946565b81010312620005965751801515810362000596573862000369565b3d91506200074a565b60405162461bcd60e51b815260206004820152602660248201527f4f6e6c792073757065727669736f722063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b6064820152608490fd5b8335878111620005d057820160a090816023198236030112620008a9576040519182018281108a8211176200089557604052602481013589811162000891576200082290602436918401016200099e565b8252604481013589811162000891576200084390602436918401016200099e565b6020830152606481013589811162000891579160a4602094926200086f8695602436918401016200099e565b604084015260848101356060840152013560808201528152019301926200030c565b8880fd5b634e487b7160e01b89526041600452602489fd5b8780fd5b5034620000cc5780600319360112620000cc576001546040516001600160a01b039091168152602090f35b905034620000c8576020366003190112620000c85760043563ffffffff60e01b8116809103620001675760209250630271189760e51b811490811562000920575b5015158152f35b6301ffc9a760e01b1490503862000919565b6001600160401b038111620005d457604052565b601f909101601f19168101906001600160401b03821190821017620005d457604052565b6001600160401b038111620005d45760051b60200190565b6001600160401b038111620005d457601f01601f191660200190565b81601f82011215620009eb57803590620009b88262000982565b92620009c8604051948562000946565b82845260208383010111620009eb57816000926020809301838601378301015290565b600080fd5b60005b83811062000a045750506000910152565b8181015183820152602001620009f3565b9060209162000a3081518092818552858086019101620009f0565b601f01601f1916010190565b600435906001600160a01b0382168203620009eb57565b602435906001600160a01b0382168203620009eb57565b81601f82011215620009eb5780359162000a84836200096a565b9262000a94604051948562000946565b808452602092838086019260051b820101928311620009eb578301905b82821062000ac0575050505090565b8135815290830190830162000ab1565b81601f82011215620009eb57805162000ae98162000982565b9262000af9604051948562000946565b81845260208284010111620009eb5762000b1a9160208085019101620009f0565b90565b6020918282820312620009eb5781516001600160401b0392838211620009eb5701916101a0938484840312620009eb57604092835195860186811084821117620005d457845284518652818501518287015283850151838111620009eb578162000b8991870162000ad0565b84870152606080860151848111620009eb578262000ba991880162000ad0565b81880152608080870151858111620009eb578362000bc991890162000ad0565b8189015260a09081880151828a015260c09182890151838b015260e0890151878111620009eb5789019285601f85011215620009eb5783519262000c0d846200096a565b9562000c1c8b51978862000946565b848752888088019560051b87010195888711620009eb57898101955b87871062000d4957505050505050505060e087015261010080860151906004821015620009eb5787015261012085810151906001600160a01b0382168203620009eb5787015261014080860151848111620009eb578262000c9b91880162000ad0565b908701526101609283860151818111620009eb5786019082601f83011215620009eb5781519062000cda62000cd0836200096a565b9751978862000946565b818752848088019260051b84010193808511620009eb57858401925b85841062000d20575050505050505083015261018080910151906005821015620009eb5782015290565b8351838111620009eb57879162000d3d848480948a010162000ad0565b81520193019262000cf6565b86518c8111620009eb57820185601f19828d030112620009eb578d5186810192908e84118185101762000ded57928f52818d0151928e8411620009eb578f8f948f8f9062000d9a9287010162000ad0565b8252830151938411620009eb578f838f95918f62000dbf90888d958199010162000ad0565b86850152888201519084015288810151888401528a8101518984015201518982015281520196019562000c38565b60246000634e487b7160e01b81526041600452fd5b805182101562000e175760209160051b010190565b634e487b7160e01b600052603260045260246000fdfe608060405234620002bb576200237c803803806200001d81620002c0565b9283398101906020918282820312620002bb5781516001600160401b0392838211620002bb570191601f91808385011215620002bb578351938285116200029157601f19946200007385820187168801620002c0565b92818452878284010111620002bb57869160005b828110620002a7575050906000918301015280519182116200029157620000b0600254620002e6565b83811162000253575b508493838311600114620001ec575092819293600092620001e0575b50508160011b916000199060031b1c1916176002555b600380546001600160a01b0319163390811790915560007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a362000133600454620002e6565b818111620001bc575b507f4672616374696f6e616c2043545620546f6b656e73000000000000000000002a6004556005546200016f90620002e6565b9080821162000198575b600a641190d5159560da1b0160055560405161203f90816200033d8239f35b620001b3926005600052600020910160051c81019062000323565b38808062000179565b620001d99060046000528284600020910160051c81019062000323565b386200013c565b015190503880620000d5565b8216936002600052856000209160005b878782106200023c57505083600195961062000222575b505050811b01600255620000eb565b015160001960f88460031b161c1916905538808062000213565b6001849582939585015181550194019201620001fc565b62000280906002600052866000208580860160051c82019289871062000287575b0160051c019062000323565b38620000b9565b9250819262000274565b634e487b7160e01b600052604160045260246000fd5b818101840151858201850152830162000087565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200029157604052565b90600182811c9216801562000318575b60208310146200030257565b634e487b7160e01b600052602260045260246000fd5b91607f1691620002f6565b8181106200032f575050565b600081556001016200032356fe6040608081526004908136101561001557600080fd5b600091823560e01c908162fdd58e1461182057816301ffc9a7146117b257816306fdde03146116ff5781630e89341c146116265781632eb2c2d6146113425781634e1273f4146111ad5781636b20c45414611069578163715018a61461101a578163862440e214610eed5781638da5cb5b14610ec457816395d89b4114610ddf578163a22cb46514610d01578163a4b645eb146109f4578163b9571e8414610539578163e985e9c5146104e7578163f242432a1461028d578163f2fde38b146101d2575063f5298aca146100e857600080fd5b8190346101cf5760603660031901126101cf57610103611850565b6001600160a01b03169060243590600080516020611fca8339815191529060443533851480156101b0575b61013790611bc8565b610142851515611ea3565b61014b84611e6e565b5061015581611e6e565b50858251610162816118bb565b528386528560205281862085875260205261018c818388205461018782821015611efb565b611c85565b8487528660205282872086885260205282872055815193845260208401523392a480f35b508486526001602090815282872033885290528186205460ff1661012e565b50fd5b905034610289576020366003190112610289576101ed611850565b600354916001600160a01b0380841692610208338514611a4e565b169384156102375750508290600080516020611fea8339815191528580a36001600160a01b0319161760035580f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b919050346102895760a0366003190112610289576102a9611850565b836102b261186b565b916044356064356084356001600160401b0381116104e3576102d790369089016119c4565b926001600160a01b03868116916102ef831515611b6e565b169233841480156104c4575b61030490611bc8565b61030d81611e6e565b5061031783611e6e565b50808652602096868852888720858852885261033d848a89205461018782821015611c26565b828852878952898820868952895289882055818752868852888720838852885288872061036b858254611c92565b905582858a51848152868b820152600080516020611fca8339815191528c3392a43b610395578580f35b889587946103d68a519788968795869463f23a6e6160e01b9c8d8752339087015260248601526044850152606484015260a0608484015260a483019061190f565b03925af1869181610495575b506104645750506001906103f4611d8d565b6308c379a014610431575b506104145750505b3880808381808080808580f35b5162461bcd60e51b81529150819061042d908201611e19565b0390fd5b610439611dab565b8061044457506103ff565b61042d8591855193849362461bcd60e51b8552840152602483019061190f565b6001600160e01b03191603905061047c575050610407565b5162461bcd60e51b81529150819061042d908201611d44565b6104b6919250843d86116104bd575b6104ae81836118ec565b810190611d24565b90386103e2565b503d6104a4565b508386526001602090815288872033885290528786205460ff166102fb565b8480fd5b50503461053557806003193601126105355760ff81602093610507611850565b61050f61186b565b6001600160a01b0391821683526001875283832091168252855220549151911615158152f35b5080fd5b905034610289576003199160a0368401126109f057610556611850565b6024946001600160401b039490919086358681116109f05761057b9036908701611966565b946044358781116104e3576105939036908301611966565b96606435938185116109ec57366023860112156109ec5784830135996105b88b61194f565b946105c5895196876118ec565b8b86526020968787018360059e8f1b830101913683116109e857848101915b8383106109be57505050506084358481116109ba5761060690369087016119c4565b60018060a01b039360039461061f818754163314611a4e565b8c5189510361096957906106508d9a9997959f98969493928f9083169b6106478d1515611f53565b51905114611c9f565b8a5b8d518110156106b157908e9f9392918e9f908f8f8f908f918f9261069e9361068887610681816106a59b611b44565b5197611b44565b5183528281528383209183525220918254611c92565b9055611b1f565b909192939f9e50610652565b508e8c8f8f95908c8f968f888d95888c94869b858588600080516020611faa8339815191526106e88f8e9051918291339583611cfc565b0390a43b610847575b5050509450505050505b85518110156108435761070e818b611b44565b516107198288611b44565b51865260068552828620908051908a8211610831578d9061073a8454611881565b601f928382116107f1575b505087918311600114610789576107799493929189918361077e575b50508160011b91600019908c1b1c1916179055611b1f565b6106fb565b015190508f80610761565b8389528789209190601f1984168a5b8a8282106107db5750509084610779979695949392106107c3575b505050600190811b019055611b1f565b0151600019838d1b60f8161c191690558e80806107b3565b6001859682939686015181550195019301610798565b858b52898b209084808701821c8301938c8810610828575b01901c01905b81811061081d57508f610745565b8a815560010161080f565b93508293610809565b634e487b7160e01b885260418c528588fd5b8480f35b83928a519889978896879563bc197c8160e01b9d8e885233908801528601526044850160a0905260a4850161087b91611a1a565b8285820301606486015261088e91611a1a565b908382030160848401526108a19161190f565b03925af186918161094a575b5061092557505060016108be611d8d565b6308c379a0146108f2575b6108dc575b878b848782888188816106f1565b5162461bcd60e51b81528061042d818a01611e19565b6108fa611dab565b8061090557506108c9565b9050889261042d925194859462461bcd60e51b865285015283019061190f565b6001600160e01b031916146108ce575162461bcd60e51b81528061042d818a01611d44565b610962919250863d88116104bd576104ae81836118ec565b908d6108ad565b508a5162461bcd60e51b81528088018a90526025818601527f455243313135353a2069647320616e642075726973206c656e677468206d69736044820152640dac2e8c6d60db1b6064820152608490fd5b8880fd5b82358881116109e4578b916109d983928936918701016119c4565b8152019201916105e4565b8c80fd5b8a80fd5b8580fd5b8380fd5b839150346105355760a036600319011261053557610a10611850565b604435936001600160401b039190602435606435848111610cfd57610a3890369087016119c4565b96608435858111610cf95790610a528792369084016119c4565b9460018060a01b03610a6981600354163314611a4e565b811695610a77871515611f53565b610a8085611e6e565b50610a8a83611e6e565b50848a5260209687928b8452878c20828d528452878c20610aac868254611c92565b9055818c89518981528787820152600080516020611fca8339815191528b3392a43b610bf1575b50505050508552600682528420928551928311610bde5750610af58354611881565b601f8111610b9b575b5080601f8311600114610b395750839482939492610b2e575b50508160011b916000199060031b1c191617905580f35b015190508480610b17565b90601f198316958486528286209286905b888210610b8357505083600195969710610b6a575b505050811b01905580f35b015160001960f88460031b161c19169055848080610b5f565b80600185968294968601518155019501930190610b4a565b838552818520601f840160051c810191838510610bd4575b601f0160051c01905b818110610bc95750610afe565b858155600101610bbc565b9091508190610bb3565b634e487b7160e01b855260419052602484fd5b610c31938b885180968195829463f23a6e6160e01b9a8b855233908501528460248501528b6044850152606484015260a0608484015260a483019061190f565b03925af1889181610cda575b50610cb45750506001610c4e611d8d565b6308c379a014610c7f575b610c68575b8488848180610ad3565b815162461bcd60e51b81528061042d818801611e19565b610c87611dab565b80610c925750610c59565b835162461bcd60e51b815280880186905290819061042d90602483019061190f565b6001600160e01b03191614610c5e57815162461bcd60e51b81528061042d818801611d44565b610cf2919250863d88116104bd576104ae81836118ec565b908a610c3d565b8780fd5b8680fd5b91905034610289578060031936011261028957610d1c611850565b90602435918215158093036104e3576001600160a01b031692338414610d8b5750338452600160205280842083855260205280842060ff1981541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b6020608492519162461bcd60e51b8352820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152fd5b50503461053557816003193601126105355780519082600554610e0181611881565b80855290600190818116908115610e9c5750600114610e43575b505050610e2d82610e3f9403836118ec565b5191829160208352602083019061190f565b0390f35b60058352602095507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410610e895750505082610e3f94610e2d9282010194610e1b565b8054868501880152928601928101610e6d565b610e3f9750610e2d9450602092508693915060ff191682840152151560051b82010194610e1b565b50503461053557816003193601126105355760035490516001600160a01b039091168152602090f35b839150346105355782600319360112610535576001600160401b036024358181116109f057610f1f90369084016119c4565b93610f3560018060a01b03600354163314611a4e565b82358452602090600682528420928551928311610bde5750610f578354611881565b601f8111610fd7575b5080601f8311600114610f8f5750839482939492610b2e5750508160011b916000199060031b1c191617905580f35b90601f198316958486528286209286905b888210610fbf57505083600195969710610b6a57505050811b01905580f35b80600185968294968601518155019501930190610fa0565b838552818520601f840160051c810191838510611010575b601f0160051c01905b8181106110055750610f60565b858155600101610ff8565b9091508190610fef565b8334611066578060031936011261106657600354816001600160a01b038216611044338214611a4e565b600080516020611fea8339815191528280a36001600160a01b03191660035580f35b80fd5b9190503461028957606036600319011261028957611085611850565b906001600160401b036024358181116109ec576110a59036908601611966565b936044359182116109ec576110bc91369101611966565b916001600160a01b0316338114801561118e575b6110d990611bc8565b6110e4811515611ea3565b6110f18451845114611c9f565b8482516110fd816118bb565b52845b8585518210156111655750806111196111609287611b44565b516111248287611b44565b518189526111496020918a8352878b20878c528352878b205461018782821015611efb565b91895288815285892090858a525284882055611b1f565b611100565b808387600080516020611faa833981519152611188898951918291339583611cfc565b0390a480f35b508085526001602090815282862033875290528185205460ff166110d0565b90503461028957816003193601126102895780356001600160401b038082116104e357366023830112156104e35781830135906111e98261194f565b926111f6865194856118ec565b82845260209260248486019160051b830101913683116109ba57602401905b82821061131f575050506024359081116109ec576112369036908501611966565b9282518451036112cc575081519461124d8661194f565b9561125a865197886118ec565b808752611269601f199161194f565b0136838801375b82518110156112ba576112b5906112a56001600160a01b036112928387611b44565b511661129e8388611b44565b5190611a99565b6112af8289611b44565b52611b1f565b611270565b845182815280610e3f81850189611a1a565b60849185519162461bcd60e51b8352820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152fd5b81356001600160a01b038116810361133e578152908401908401611215565b8980fd5b905034610289576003199160a0368401126109f05761135f611850565b61136761186b565b936001600160401b0393604435858111610cf9576113889036908301611966565b906064358681116109ba576113a09036908301611966565b956084359081116109ba576113b890369083016119c4565b926113c68351885114611c9f565b6001600160a01b03888116956113dd871515611b6e565b16933385148015611608575b156115aa57895b8a855182101561146e57908961069e8a6114699461141985611412818d611b44565b5195611b44565b51938082526020908282528383208d84528252611440868585205461018782821015611c26565b8184528383528d8585209085528352848420558252818152828220908d83525220918254611c92565b6113f0565b5050909493959692919784878951600080516020611faa8339815191523391806114998a8a83611cfc565b0390a43b6114a5578880f35b8651948593849363bc197c8160e01b98898652338c87015260248601526044850160a0905260a485016114d791611a1a565b828582030160648601526114ea91611a1a565b908382030160848401526114fd9161190f565b0381885a94602095f185918161158a575b50611574575050600161151f611d8d565b6308c379a01461153d575b6104145750505b38808080808080808880f35b611545611dab565b80611550575061152a565b905061042d91602094505193849362461bcd60e51b8552840152602483019061190f565b6001600160e01b0319160361047c575050611531565b6115a391925060203d81116104bd576104ae81836118ec565b903861150e565b865162461bcd60e51b8152602081850152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608490fd5b50848a526001602052868a20338b5260205260ff878b2054166113e9565b9190503461028957602091826003193601126109f0573583526006825280832081519384918181549061165882611881565b928386526001928884821691826000146116d5575050600114611697575b8588610e3f89611688848a03856118ec565b5192828493845283019061190f565b87945081939291528383205b8284106116bd5750505082010181611688610e3f38611676565b8054848a0186015288955087949093019281016116a3565b60ff19168882015294151560051b870190940194508593506116889250610e3f9150389050611676565b8383346105355781600319360112610535578051918093805461172181611881565b80865291600191808316908115611787575060011461174c575b610e3f8686610e2d828b03836118ec565b835260208084209096505b8284106117745750505082610e3f94610e2d92820101948661173b565b8054868501880152928601928101611757565b9050610e3f9750610e2d9450602092508693915060ff191682840152151560051b820101948661173b565b90503461028957602036600319011261028957359063ffffffff60e01b82168092036102895760209250636cdb3d1360e11b821491821561180f575b82156117fe575b50519015158152f35b6301ffc9a760e01b149150386117f5565b6303a24d0760e21b811492506117ee565b505034610535578060031936011261053557602090611849611840611850565b60243590611a99565b9051908152f35b600435906001600160a01b038216820361186657565b600080fd5b602435906001600160a01b038216820361186657565b90600182811c921680156118b1575b602083101461189b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611890565b602081019081106001600160401b038211176118d657604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176118d657604052565b919082519283825260005b84811061193b575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161191a565b6001600160401b0381116118d65760051b60200190565b81601f820112156118665780359161197d8361194f565b9261198b60405194856118ec565b808452602092838086019260051b820101928311611866578301905b8282106119b5575050505090565b813581529083019083016119a7565b81601f82011215611866578035906001600160401b0382116118d657604051926119f8601f8401601f1916602001856118ec565b8284526020838301011161186657816000926020809301838601378301015290565b90815180825260208080930193019160005b828110611a3a575050505090565b835185529381019392810192600101611a2c565b15611a5557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b0316908115611ac657600052600060205260406000209060005260205260406000205490565b60405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608490fd5b6000198114611b2e5760010190565b634e487b7160e01b600052601160045260246000fd5b8051821015611b585760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b15611b7557565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b15611bcf57565b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608490fd5b15611c2d57565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b91908203918211611b2e57565b91908201809211611b2e57565b15611ca657565b60405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b9091611d13611d2193604084526040840190611a1a565b916020818403910152611a1a565b90565b9081602091031261186657516001600160e01b0319811681036118665790565b60809060208152602860208201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b60608201520190565b60009060033d11611d9a57565b905060046000803e60005160e01c90565b600060443d10611d2157604051600319913d83016004833e81516001600160401b03918282113d602484011117611e0857818401948551938411611e10573d85010160208487010111611e085750611d21929101602001906118ec565b949350505050565b50949350505050565b60809060208152603460208201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60608201520190565b60408051919082016001600160401b038111838210176118d65760405260018252602082016020368237825115611b58575290565b15611eaa57565b60405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b15611f0257565b60405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608490fd5b15611f5a57565b60405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608490fdfe4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fbc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220661f93ef58911c552407a294425731cd6da151104af99e286490ae3ea5beb00a64736f6c63430008130033a2646970667358221220b037d9c6d8fd2b286ba81910930e92430f44390a6082ef5cc9a772f493244e4d64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7340,
        "contract": "contracts/Rewards.sol:Rewards",
        "label": "nftContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(NFTVenture)7037"
      },
      {
        "astId": 7342,
        "contract": "contracts/Rewards.sol:Rewards",
        "label": "supervisor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(NFTVenture)7037": {
        "encoding": "inplace",
        "label": "contract NFTVenture",
        "numberOfBytes": "20"
      }
    }
  }
}