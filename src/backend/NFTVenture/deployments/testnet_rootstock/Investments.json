{
  "address": "0x61497be772a03E81081D9E4Cf5956ea039ed6DB0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward_tokens",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LogInvestment",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Reward_tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "getInvestmentDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalInvested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingFunding",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "getInvestmentHistory",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "investors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "tokenIds",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "tokenAmounts",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "investor",
          "type": "address"
        }
      ],
      "name": "getInvestmentsByAddress",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "tokenIds",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "tokenAmounts",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "investor",
          "type": "address"
        }
      ],
      "name": "getInvestmentsByAddressInAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "investAsset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supervisor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6835bb600dd276b08f5cc2136c36fec2b23fec3572cef1fd7d70d588e5356a7",
  "receipt": {
    "to": null,
    "from": "0x2F59A1cf89c1124c79A86118A9339772c7F63EAF",
    "contractAddress": "0x61497be772a03E81081D9E4Cf5956ea039ed6DB0",
    "transactionIndex": 2,
    "gasUsed": "1256002",
    "logsBloom": "0x
    "blockHash": "0x2df5da8d166873f038d98cb2c421ab8706e1da433cb97fd9363b65aad55ab1cf",
    "transactionHash": "0xb6835bb600dd276b08f5cc2136c36fec2b23fec3572cef1fd7d70d588e5356a7",
    "logs": [],
    "blockNumber": 5293212,
    "cumulativeGasUsed": "1446066",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x18feA9a72fe998f2f0643061FC2149F728D5475B",
    "0x1e6b741A06f858CD61bFFcE7D8EAC6d76415548A"
  ],
  "numDeployments": 1,
  "solcInputHash": "289b62e2243967edd4cdb5ffc0cfa5dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_tokens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Reward_tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getInvestmentDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingFunding\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getInvestmentHistory\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"investors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getInvestmentsByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getInvestmentsByAddressInAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"investAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supervisor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Investments.sol\":\"Investments\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x3dce5847e70c056ef0f7cf91cb9a0067cf90784794017a45c1211cde7ed1c08c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd03f5c3d258a9b0f751a3246e0802106585561ab5909b808368759364fc786f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AssetStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nenum ProjectStatus {\\n    Started,\\n    Funded,\\n    Failed,\\n    Completed\\n}\\n\\nenum Category {\\n    Technology,\\n    Gaming,\\n    Music,\\n    Movies,\\n    Art\\n}\\n\\nstruct Reward {\\n    string title;\\n    string description;\\n    uint256 tokenAmount;\\n    uint256 individualPrice;\\n    uint256 availableTokens;\\n    uint256 rewardTokenId;\\n}\\n\\nstruct NewReward {\\n    string tokenURI;\\n    string title;\\n    string description;\\n    uint256 tokenAmount;\\n    uint256 individualPrice;\\n}\\n\\nstruct Asset {\\n    uint256 assetId;\\n    uint256 price;\\n    string author;\\n    string title;\\n    string description;\\n    uint256 projectStartDate;\\n    uint256 projectEndDate;\\n    Reward[] rewards;\\n    ProjectStatus status;\\n    address rewardTokenAddress;\\n    string mainPhoto;\\n    string[] secondaryPhotos;\\n    Category category;\\n}\\n\",\"keccak256\":\"0x2ffc38b9e3b4154b2c7ededb682535a9fd6dfb1419217873d7ff8c3dcbe3e9b4\",\"license\":\"MIT\"},\"contracts/Investments.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nimport \\\"./NFTVenture.sol\\\";\\nimport \\\"./AssetStruct.sol\\\";\\n\\n\\ncontract Investments {\\n    NFTVenture private nftContract;\\n    address public Reward_tokens;\\n    address public supervisor;\\n\\n    // Eventos\\n    event LogInvestment(\\n        address indexed investor,\\n        uint256 indexed assetId,\\n        uint256 indexed tokenId,\\n        uint256 tokenAmount,\\n        uint256 value\\n    );\\n\\n\\n    // Constructor\\n    constructor(address nftAddress, address reward_tokens) {\\n        nftContract = NFTVenture(nftAddress);\\n        supervisor = msg.sender;\\n        Reward_tokens = reward_tokens;\\n    }\\n\\n    modifier onlySupervisor() {\\n        require(\\n            msg.sender == supervisor,\\n            \\\"Only supervisor can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAssetOwner(uint256 assetId) {\\n        require(\\n            nftContract.ownerOf(assetId) == msg.sender,\\n            \\\"Caller is not the owner of the asset\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    ////////////////////////////////////////////////////////////////////////////////\\n    // Functions Investments //\\n    ////////////////////////////////////////////////////////////////////////////////\\n\\n\\n function investAsset(uint256 assetId, uint256 rewardTokenId, uint256 tokenAmount) public payable {\\n        require(tokenAmount > 0, \\\"Token amount must be greater than 0\\\");\\n        require(nftContract.exists(assetId), \\\"Asset does not exist\\\");\\n        \\n        Asset memory asset = nftContract.getAsset(assetId);\\n        require(asset.status == ProjectStatus.Started, \\\"Project is not in Started status\\\");\\n        \\n        Reward memory reward;\\n        bool rewardFound = false;\\n        uint256 rewardIndex = 0;\\n\\n        for (uint256 i = 0; i < asset.rewards.length; i++) {\\n            if (asset.rewards[i].rewardTokenId == rewardTokenId) {\\n                reward = asset.rewards[i];\\n                rewardFound = true;\\n                rewardIndex = i;\\n                break;\\n            }\\n        }\\n\\n        require(rewardFound, \\\"Reward does not exist for this asset\\\");\\n        require(reward.availableTokens >= tokenAmount, \\\"Not enough available tokens\\\");\\n        require(msg.value == reward.individualPrice * tokenAmount, \\\"Incorrect value sent\\\");\\n\\n        reward.availableTokens -= tokenAmount;\\n        nftContract.updateAssetReward(assetId, rewardIndex, reward.availableTokens);\\n        nftContract.addInvestment(assetId, msg.sender, msg.value);\\n\\n        bool investorExists = false;\\n        address[] memory investors = nftContract.getAssetInvestors(assetId);\\n\\n        for (uint256 i = 0; i < investors.length; i++) {\\n            if (investors[i] == msg.sender) {\\n                investorExists = true;\\n                break;\\n            }\\n        }\\n\\n        if (!investorExists) {\\n            nftContract.addInvestor(assetId, msg.sender);\\n        }\\n\\n        nftContract.updateInvestorTokens(assetId, msg.sender, rewardTokenId, tokenAmount);\\n\\n        emit LogInvestment(\\n            msg.sender,\\n            assetId,\\n            rewardTokenId,\\n            tokenAmount,\\n            msg.value\\n        );\\n    }\\n\\n    function getInvestmentDetails(uint256 assetId) public view returns (uint256 totalInvested, uint256 remainingFunding) {\\n        require(nftContract.exists(assetId), \\\"Asset does not exist\\\");\\n        Asset memory asset = nftContract.getAsset(assetId);\\n        totalInvested = nftContract.investmentReceived(assetId);\\n        remainingFunding = asset.price > totalInvested ? asset.price - totalInvested : 0;\\n    }\\n\\nfunction getInvestmentHistory(uint256 assetId) public view returns (address[] memory investors, uint256[] memory amounts, uint256[][] memory tokenIds, uint256[][] memory tokenAmounts) {\\n    require(nftContract.exists(assetId), \\\"Asset does not exist\\\");\\n\\n    investors = nftContract.getAssetInvestors(assetId);\\n    uint256 investorCount = investors.length;\\n    \\n    amounts = new uint256[](investorCount);\\n    tokenIds = new uint256[][](investorCount);\\n    tokenAmounts = new uint256[][](investorCount);\\n\\n    for (uint256 i = 0; i < investorCount; i++) {\\n        address investor = investors[i];\\n        amounts[i] = nftContract.getInvestmentAmount(assetId, investor); \\n        (tokenIds[i], tokenAmounts[i]) = nftContract.getInvestorTokens(assetId, investor);\\n    }\\n}\\n\\n\\nfunction getInvestmentsByAddress(address investor) public view returns (uint256[] memory assetIds, uint256[] memory amounts, uint256[][] memory tokenIds, uint256[][] memory tokenAmounts) {\\n    uint256[] memory investorInvestments = nftContract.getInvestorAssets(investor);\\n    uint256 investmentCount = investorInvestments.length;\\n\\n    assetIds = new uint256[](investmentCount);\\n    amounts = new uint256[](investmentCount);\\n    tokenIds = new uint256[][](investmentCount);\\n    tokenAmounts = new uint256[][](investmentCount);\\n\\n    for (uint256 i = 0; i < investmentCount; i++) {\\n        uint256 assetId = investorInvestments[i];\\n        amounts[i] = nftContract.getInvestmentAmount(assetId, investor); \\n        (tokenIds[i], tokenAmounts[i]) = nftContract.getInvestorTokens(assetId, investor); \\n        assetIds[i] = assetId;\\n    }\\n}\\n\\nfunction getInvestmentsByAddressInAsset(uint256 assetId, address investor) public view returns (uint256 amount, uint256[] memory tokenIds, uint256[] memory tokenAmounts) {\\n    require(nftContract.exists(assetId), \\\"Asset does not exist\\\");\\n    \\n    amount = nftContract.getInvestmentAmount(assetId, investor); \\n    (tokenIds, tokenAmounts) = nftContract.getInvestorTokens(assetId, investor); \\n\\n}\\n\\n\\n\\n}\",\"keccak256\":\"0x9151d2bf56bed22f6a442709670722a515158df3ae040bfe7d3b2133ee1283ec\",\"license\":\"MIT\"},\"contracts/NFTVenture.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"./AssetStruct.sol\\\";\\n\\ncontract NFTVenture is\\n    ERC721,\\n    ERC721Enumerable,\\n    ERC721URIStorage,\\n    Pausable,\\n    Ownable,\\n    ERC721Burnable\\n{\\n    // Assets\\n    uint256 public assetsCount;\\n    mapping(uint256 => Asset) public assetMap;\\n    mapping(uint256 => bool) public assetExists;\\n\\n    mapping(address => uint256[]) public ownerToAssets;\\n\\n    mapping(uint256 => address) public assetApprovals;\\n    mapping(uint256 => address) public assetOwner;\\n    mapping(address => uint256) public ownedAssetsCount;\\n\\n    // State-based Asset IDs\\n    uint256[] public activeAssets;\\n    uint256[] public fundedAssets;\\n    uint256[] public failedAssets;\\n    uint256[] public completedAssets;\\n\\n    // Category-based Asset IDs\\n    mapping(Category => uint256[]) public categoryAssets;\\n\\n    // Investments\\n    mapping(uint256 => mapping(address => uint256)) public investmentAmountOf;\\n    mapping(uint256 => uint256) public investmentReceived;\\n    mapping(uint256 => address[]) public assetInvestors;\\n    mapping(uint256 => bool) public isTransferAllowed;\\n    mapping(uint256 => bool) public isRefundingAllowed;\\n    mapping(uint256 => uint256) public investmentRefunded;\\n    mapping(uint256 => mapping(address => uint256)) public pendingReturns;\\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256)))\\n        public investorTokens;\\n    mapping(uint256 => uint256) public totalInvestors;\\n    mapping(uint256 => uint256) public totalInvestment;\\n    mapping(address => uint256[]) public investorAssets;\\n\\n    // Constructor\\n    constructor() ERC721(\\\"FractionalCTV\\\", \\\"FCTV\\\") {}\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function _burn(\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    modifier isNFTOwner(uint256 assetId) {\\n        require(msg.sender == ownerOf(assetId));\\n        _;\\n    }\\n\\n    function balanceOf() public view returns (uint256) {\\n        require(\\n            msg.sender != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return ownedAssetsCount[msg.sender];\\n    }\\n\\n    function ownerOf(\\n        uint256 assetId\\n    ) public view override(ERC721, IERC721) returns (address) {\\n        address owner = assetOwner[assetId];\\n        require(owner != address(0), \\\"NoAssetExists\\\");\\n        return owner;\\n    }\\n\\n    function approve(\\n        address to,\\n        uint256 assetId\\n    ) public override(ERC721, IERC721) {\\n        address owner = ownerOf(assetId);\\n        require(to != owner, \\\"CurrentOwnerApproval\\\");\\n        require(msg.sender == owner, \\\"NotTheAssetOwner\\\");\\n        assetApprovals[assetId] = to;\\n        emit Approval(owner, to, assetId);\\n    }\\n\\n    function getApproved(\\n        uint256 assetId\\n    ) public view override(ERC721, IERC721) returns (address) {\\n        require(\\n            _exists(assetId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n        return assetApprovals[assetId];\\n    }\\n\\n    function clearApproval(uint256 assetId, address approved) public {\\n        if (assetApprovals[assetId] == approved) {\\n            assetApprovals[assetId] = address(0);\\n        }\\n    }\\n\\n    function mint(address to, uint256 assetId, string memory asseturi) public {\\n        require(to != address(0), \\\"ZeroAddressMiniting\\\");\\n        _safeMint(to, assetId);\\n        _setTokenURI(assetId, asseturi);\\n        emit Transfer(address(0), to, assetId);\\n    }\\n\\n    function exists(uint256 assetId) public view returns (bool) {\\n        return assetExists[assetId];\\n    }\\n\\n    function isApprovedOrOwner(\\n        address spender,\\n        uint256 assetId\\n    ) external view returns (bool) {\\n        require(\\n            exists(assetId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(assetId);\\n        return (spender == owner || getApproved(assetId) == spender);\\n    }\\n\\n    function _addAsset(\\n        uint256 assetId,\\n        Asset memory asset,\\n        address to\\n    ) external {\\n        assetMap[assetId] = asset;\\n        assetOwner[assetId] = to;\\n        ownedAssetsCount[to]++;\\n        ownerToAssets[to].push(assetId);\\n        assetExists[assetId] = true;\\n        activeAssets.push(assetId);\\n        categoryAssets[asset.category].push(assetId);\\n    }\\n\\n    function getAsset(uint256 assetId) public view returns (Asset memory) {\\n        return assetMap[assetId];\\n    }\\n\\n    function updateAsset(uint256 assetId, Asset memory asset) public {\\n        assetMap[assetId] = asset;\\n    }\\n\\n    function getAssetsCount() public view returns (uint256) {\\n        return assetsCount;\\n    }\\n\\n    function incrementAssetsCount() public {\\n        assetsCount++;\\n    }\\n\\n    function getAssetsOfOwner(\\n        address owner\\n    ) public view returns (uint256[] memory) {\\n        return ownerToAssets[owner];\\n    }\\n\\n    function updateAssetReward(\\n        uint256 assetId,\\n        uint256 rewardIndex,\\n        uint256 newAvailableTokens\\n    ) external {\\n        require(\\n            rewardIndex < assetMap[assetId].rewards.length,\\n            \\\"Invalid reward index\\\"\\n        );\\n        assetMap[assetId]\\n            .rewards[rewardIndex]\\n            .availableTokens = newAvailableTokens;\\n    }\\n\\n    function handleRewardAddedToAsset(\\n        uint256 assetId,\\n        string memory title,\\n        string memory description,\\n        uint256 tokenAmount,\\n        uint256 individualPrice,\\n        bytes32 rewardId\\n    ) external {\\n        Asset storage asset = assetMap[assetId];\\n        asset.rewards.push(\\n            Reward({\\n                title: title,\\n                description: description,\\n                tokenAmount: tokenAmount,\\n                individualPrice: individualPrice,\\n                availableTokens: tokenAmount,\\n                rewardTokenId: uint256(rewardId)\\n            })\\n        );\\n    }\\n\\n    function updateRewardTokenAddress(\\n        uint256 assetId,\\n        address rewardTokenAddress\\n    ) external {\\n        assetMap[assetId].rewardTokenAddress = rewardTokenAddress;\\n    }\\n\\n    function addInvestment(\\n        uint256 assetId,\\n        address investor,\\n        uint256 amount\\n    ) external {\\n        investmentAmountOf[assetId][investor] += amount;\\n        investmentReceived[assetId] += amount;\\n        totalInvestment[assetId] += amount;\\n        if (investmentAmountOf[assetId][investor] == amount) {\\n            assetInvestors[assetId].push(investor);\\n            investorAssets[investor].push(assetId);\\n\\n            totalInvestors[assetId]++;\\n        }\\n    }\\n\\n    function getTotalInvestment(\\n        uint256 assetId\\n    ) external view returns (uint256) {\\n        return totalInvestment[assetId];\\n    }\\n\\n    function getTotalInvestors(\\n        uint256 assetId\\n    ) external view returns (uint256) {\\n        return totalInvestors[assetId];\\n    }\\n\\n    function addInvestor(uint256 assetId, address investor) external {\\n        assetInvestors[assetId].push(investor);\\n        investorAssets[investor].push(assetId);\\n    }\\n\\n    function getAssetInvestors(\\n        uint256 assetId\\n    ) external view returns (address[] memory) {\\n        return assetInvestors[assetId];\\n    }\\n\\n    function getInvestorAssets(\\n        address investor\\n    ) external view returns (uint256[] memory) {\\n        return investorAssets[investor];\\n    }\\n    function getInvestorTokens(\\n        uint256 assetId,\\n        address investor\\n    ) public view returns (uint256[] memory, uint256[] memory) {\\n        Asset memory asset = assetMap[assetId];\\n        uint256 rewardCount = asset.rewards.length;\\n\\n        uint256[] memory tokenIds = new uint256[](rewardCount);\\n        uint256[] memory tokenAmounts = new uint256[](rewardCount);\\n\\n        for (uint256 i = 0; i < rewardCount; i++) {\\n            uint256 tokenId = asset.rewards[i].rewardTokenId;\\n            tokenIds[i] = tokenId;\\n            tokenAmounts[i] = investorTokens[assetId][investor][tokenId];\\n        }\\n\\n        return (tokenIds, tokenAmounts);\\n    }\\n\\n    function getInvestmentAmount(\\n        uint256 assetId,\\n        address investor\\n    ) public view returns (uint256) {\\n        return investmentAmountOf[assetId][investor];\\n    }\\n\\n    function updateInvestorTokens(\\n        uint256 assetId,\\n        address investor,\\n        uint256 tokenId,\\n        uint256 tokenAmount\\n    ) external {\\n        investorTokens[assetId][investor][tokenId] = tokenAmount;\\n    }\\n\\n    function allowTransfers(uint256 assetId, bool allowed) external {\\n        isTransferAllowed[assetId] = allowed;\\n    }\\n\\n    function allowRefunding(uint256 assetId, bool allowed) external {\\n        isRefundingAllowed[assetId] = allowed;\\n    }\\n\\n    function updatePendingReturns(\\n        uint256 assetId,\\n        address investor,\\n        uint256 amount\\n    ) external {\\n        pendingReturns[assetId][investor] = amount;\\n    }\\n\\n    function updateInvestmentRefunded(\\n        uint256 assetId,\\n        uint256 amount\\n    ) external {\\n        investmentRefunded[assetId] = amount;\\n    }\\n\\n    function getActiveAssets() external view returns (uint256[] memory) {\\n        return activeAssets;\\n    }\\n\\n    function getFundedAssets() external view returns (uint256[] memory) {\\n        return fundedAssets;\\n    }\\n\\n    function getFailedAssets() external view returns (uint256[] memory) {\\n        return failedAssets;\\n    }\\n\\n    function getCompletedAssets() external view returns (uint256[] memory) {\\n        return completedAssets;\\n    }\\n\\n    function getAssetsByCategory(\\n        Category category\\n    ) external view returns (uint256[] memory) {\\n        return categoryAssets[category];\\n    }\\n}\\n\",\"keccak256\":\"0xfe8b84cc7cf611042e781969058a556bbdef20e9d3d6073a89df555c628fffc7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461009857601f61155a38819003918201601f19168301916001600160401b0383118484101761009d57808492604094855283398101031261009857610052602061004b836100b3565b92016100b3565b600080546001600160a01b03199081166001600160a01b039485161790915560028054821633179055600180549091169190921617905560405161149290816100c88239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100985756fe608080604052600436101561001357600080fd5b60009060e08235811c91826309b3da2b14610da75750816316bd19d414610b555781631e011b3e1461092d57816356e4b68b14610904578163af33062314610783578163bc4040d2146101f1575063ce7f35b41461007057600080fd5b346101ee57602090816003193601126101ee576004359160018060a01b0382541691604051634f558e7960e01b81528460048201528281602481875afa9081156101b657906100c69183916101c1575b50610edb565b604051631d591eb760e31b815260048101859052938185602481875afa9485156101b6578295610190575b508290602460405180968193630c0adb9160e41b835260048301525afa92831561018357819361014c575b5082826040950151818111600014610144576101389250611295565b905b8351928352820152f35b50509061013a565b9180935082813d831161017c575b6101648183610ea0565b810103126101775790519190604061011c565b600080fd5b503d61015a565b50604051903d90823e3d90fd5b839195506101af903d8085833e6101a78183610ea0565b810190610fb9565b94906100f1565b6040513d84823e3d90fd5b6101e19150843d86116101e7575b6101d98183610ea0565b810190610ec3565b386100c0565b503d6101cf565b80fd5b9050606036600319011261077f576044351561072e578154604051634f558e7960e01b815260048035908201526001600160a01b0390911690602081602481855afa801561070a576102499185916107155750610edb565b604051631d591eb760e31b81526004803590820152918383602481855afa92831561070a5784936106ee575b5061010083015160048110156106da576106965760405161029581610e5c565b60608152606060208201528460408201528460608201528460808201528460a08201529084908590865b8187018051805183101561068a5760a06102dc846024359361126b565b510151146102f357506102ee90611246565b6102bf565b92509495505061030792508391505161126b565b5160015b156106395760808101906044358251106105f6576060015160443581029080820460443514901517156105e25734036105a657839161034d6044358351611295565b809252833b156105a2576064908360405195869485936343d08af360e11b85526004356004860152602485015260448401525af180156101b657610593575b50805481906001600160a01b0316803b156104f957818091606460405180948193631e7d210960e21b835260043560048401523360248401523460448401525af180156101b65761057f575b509060018060a01b038154166040516307c9054760e01b815260043560048201528281602481855afa908115610574578391610552575b50825b815181101561054957336001600160a01b0361042e838561126b565b5116146104435761043e90611246565b610412565b505081925060015b156104fc575b5080546001600160a01b0316803b156104f9578180916084604051809481936368b3727760e11b83526004356004840152336024840152602435604484015260443560648401525af180156101b6576104e5575b50604051604435815234602082015260243590600435907ff85c915ce9c62984825f2ff42dc2ac372422bebf345a567590885dc78681325d60403392a480f35b6104ee90610e8d565b6101ee5780386104a5565b50fd5b803b156104f957816040518092635df1839160e11b82528183816105263360043560048401611323565b03925af180156101b657156104515761053e90610e8d565b6101ee578038610451565b5050819261044b565b61056e91503d8085833e6105668183610ea0565b8101906112a2565b3861040f565b6040513d85823e3d90fd5b61058890610e8d565b6101ee5780386103d8565b61059c90610e8d565b3861038c565b8280fd5b60405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd081d985b1d59481cd95b9d60621b6044820152606490fd5b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152601b60248201527a4e6f7420656e6f75676820617661696c61626c6520746f6b656e7360281b6044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f52657761726420646f6573206e6f7420657869737420666f72207468697320616044820152631cdcd95d60e21b6064820152608490fd5b5050505092935061030b565b606460405162461bcd60e51b815260206004820152602060248201527f50726f6a656374206973206e6f7420696e2053746172746564207374617475736044820152fd5b634e487b7160e01b85526021600452602485fd5b6107039193503d8086833e6101a78183610ea0565b9138610275565b6040513d86823e3d90fd5b6101e1915060203d6020116101e7576101d98183610ea0565b60405162461bcd60e51b815260206004820152602360248201527f546f6b656e20616d6f756e74206d75737420626520677265617465722074686160448201526206e20360ec1b6064820152608490fd5b5080fd5b82346101ee5760403660031901126101ee5760243590600435906001600160a01b03808416840361077f578154169260405193634f558e7960e01b85528360048601526020948581602481855afa90811561070a57906107e99185916108e75750610edb565b604051635dbf1c2d60e11b815293858580610808868560048401611323565b0381855afa94851561070a5784956108b2575b5060405163ebcab60560e01b81529392839285929091839182916108429160048401611323565b03915afa9182156101835790610886929181809361088a575b505061087890606060405196879687528601526060850190610dcc565b908382036040850152610dcc565b0390f35b61087893506108ab92503d8091833e6108a38183610ea0565b810190611416565b918661085b565b9094508581813d83116108e0575b6108ca8183610ea0565b810103126108dc57519361084261081b565b8380fd5b503d6108c0565b6108fe9150873d89116101e7576101d98183610ea0565b876100c0565b82346101ee57806003193601126101ee576002546040516001600160a01b039091168152602090f35b82346101ee57602090816003193601126101ee576004356001600160a01b03818116918290036105a25782541660405191633a79e15360e21b835260048301528282602481845afa918215610574578392610b10575b508151936109908561133c565b9361099a8661133c565b956109a48161136e565b936109ae8261136e565b95835b838110610a07576109de896108868a6109f98b8f8c6109eb9160405198899860808a5260808a0190610dcc565b9188830390890152610dcc565b908582036040870152610e00565b908382036060850152610e00565b610a11818361126b565b51604051635dbf1c2d60e11b8152878180610a326004358660048401611323565b0381885afa908115610ad4578791610adf575b50610a50838d61126b565b5260405163ebcab60560e01b8152868180610a716004358660048401611323565b0381885afa8015610ad45790610ab393929188918991610ab8575b50610a97848d61126b565b52610aa2838b61126b565b52610aad828c61126b565b52611246565b6109b1565b9050610ace91503d808a833e6108a38183610ea0565b8e610a8c565b6040513d89823e3d90fd5b90508781813d8311610b09575b610af68183610ea0565b81010312610b0557518c610a45565b8680fd5b503d610aec565b9091503d8084833e610b228183610ea0565b81019084818303126108dc578051906001600160401b038211610b5157610b4a9291016113b8565b9084610983565b8480fd5b82346101ee5760203660031901126101ee578054604051634f558e7960e01b815260048035908201526001600160a01b039291831690602081602481855afa9081156105745790610bac918491610d885750610edb565b6040516307c9054760e01b815260048035908201528281602481855afa908115610574578391610d6e575b50805190610be48261133c565b610bed8361136e565b92610bf78161136e565b94865b828110610c5a575050506040519460808601608087528351809152602060a088019401915b818110610c42578780610886896109f98a6109eb8b8b8782036020890152610dcc565b82518916855260209485019490920191600101610c1f565b88610c65828761126b565b5116604051635dbf1c2d60e11b815260208180610c888560043560048401611323565b0381875afa908115610d6357908a918291610d28575b5091610ccc92610cae858961126b565b526040518093819263ebcab60560e01b835260043560048401611323565b0381865afa8015610d1d5790610cfc92918a918b91610d01575b50610cf1838b61126b565b52610aad828961126b565b610bfa565b9050610d1791503d808c833e6108a38183610ea0565b8c610ce6565b6040513d8b823e3d90fd5b9150506020813d602011610d5b575b81610d4460209383610ea0565b81010312610d5757518990610ccc610c9e565b8980fd5b3d9150610d37565b6040513d8c823e3d90fd5b610d8291503d8085833e6105668183610ea0565b84610bd7565b610da1915060203d6020116101e7576101d98183610ea0565b856100c0565b83903461077f578160031936011261077f576001546001600160a01b03168152602090f35b90815180825260208080930193019160005b828110610dec575050505090565b835185529381019392810192600101610dde565b908082519081815260208091019281808460051b8301019501936000915b848310610e2e5750505050505090565b9091929394958480610e4c600193601f198682030187528a51610dcc565b9801930193019194939290610e1e565b60c081019081106001600160401b03821117610e7757604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111610e7757604052565b601f909101601f19168101906001600160401b03821190821017610e7757604052565b90816020910312610177575180151581036101775790565b15610ee257565b60405162461bcd60e51b8152602060048201526014602482015273105cdcd95d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b919080601f84011215610177578251906001600160401b038211610e775760405191602091610f56601f8301601f1916840185610ea0565b8184528282870101116101775760005b818110610f7b57508260009394955001015290565b8581018301518482018401528201610f66565b6001600160401b038111610e775760051b60200190565b51906001600160a01b038216820361017757565b60209182828203126101775781516001600160401b03928382116101775701916101a093848484031261017757604092835195860186811084821117610e7757845284518652818501518287015283850151838111610177578161101e918701610f1e565b84870152606080860151848111610177578261103b918801610f1e565b818801526080808701518581116101775783611058918901610f1e565b8189015260a09081880151828a015260c09182890151838b015260e08901518781116101775789019285601f850112156101775783519261109884610f8e565b956110a58b519788610ea0565b848752888088019560051b8701019588871161017757898101955b8787106111b557505050505050505060e087015261010080860151906004821015610177578701526101206110f6818701610fa5565b90870152610140808601518481116101775782611114918801610f1e565b9087015261016092838601518181116101775786019082601f830112156101775781519061114d61114483610f8e565b97519788610ea0565b818752848088019260051b8401019380851161017757858401925b8584106111905750505050505050830152610180809101519060058210156101775782015290565b83518381116101775787916111aa848480948a0101610f1e565b815201930192611168565b86518c811161017757820185601f19828d030112610177578c918e516111da81610e5c565b8d830151938411610177578f8f948f8f906111f792870101610f1e565b8252830151938411610177578f838f95918f61121990888d9581990101610f1e565b86850152888201519084015288810151888401528a810151898401520151898201528152019601956110c0565b60001981146112555760010190565b634e487b7160e01b600052601160045260246000fd5b805182101561127f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190820391821161125557565b6020908181840312610177578051906001600160401b03821161017757019180601f840112156101775782516112d781610f8e565b936112e56040519586610ea0565b818552838086019260051b820101928311610177578301905b82821061130c575050505090565b83809161131884610fa5565b8152019101906112fe565b9081526001600160a01b03909116602082015260400190565b9061134682610f8e565b6113536040519182610ea0565b8281528092611364601f1991610f8e565b0190602036910137565b9061137882610f8e565b6113856040519182610ea0565b8281528092611396601f1991610f8e565b019060005b8281106113a757505050565b80606060208093850101520161139b565b81601f82011215610177578051916113cf83610f8e565b926113dd6040519485610ea0565b808452602092838086019260051b820101928311610177578301905b828210611407575050505090565b815181529083019083016113f9565b9190916040818403126101775780516001600160401b03939084811161017757816114429184016113b8565b9360208301519081116101775761145992016113b8565b9056fea264697066735822122086a1d8be9730b5e466827830571e6ea7f455a35dcaf2df1becf79207756bb90364736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60009060e08235811c91826309b3da2b14610da75750816316bd19d414610b555781631e011b3e1461092d57816356e4b68b14610904578163af33062314610783578163bc4040d2146101f1575063ce7f35b41461007057600080fd5b346101ee57602090816003193601126101ee576004359160018060a01b0382541691604051634f558e7960e01b81528460048201528281602481875afa9081156101b657906100c69183916101c1575b50610edb565b604051631d591eb760e31b815260048101859052938185602481875afa9485156101b6578295610190575b508290602460405180968193630c0adb9160e41b835260048301525afa92831561018357819361014c575b5082826040950151818111600014610144576101389250611295565b905b8351928352820152f35b50509061013a565b9180935082813d831161017c575b6101648183610ea0565b810103126101775790519190604061011c565b600080fd5b503d61015a565b50604051903d90823e3d90fd5b839195506101af903d8085833e6101a78183610ea0565b810190610fb9565b94906100f1565b6040513d84823e3d90fd5b6101e19150843d86116101e7575b6101d98183610ea0565b810190610ec3565b386100c0565b503d6101cf565b80fd5b9050606036600319011261077f576044351561072e578154604051634f558e7960e01b815260048035908201526001600160a01b0390911690602081602481855afa801561070a576102499185916107155750610edb565b604051631d591eb760e31b81526004803590820152918383602481855afa92831561070a5784936106ee575b5061010083015160048110156106da576106965760405161029581610e5c565b60608152606060208201528460408201528460608201528460808201528460a08201529084908590865b8187018051805183101561068a5760a06102dc846024359361126b565b510151146102f357506102ee90611246565b6102bf565b92509495505061030792508391505161126b565b5160015b156106395760808101906044358251106105f6576060015160443581029080820460443514901517156105e25734036105a657839161034d6044358351611295565b809252833b156105a2576064908360405195869485936343d08af360e11b85526004356004860152602485015260448401525af180156101b657610593575b50805481906001600160a01b0316803b156104f957818091606460405180948193631e7d210960e21b835260043560048401523360248401523460448401525af180156101b65761057f575b509060018060a01b038154166040516307c9054760e01b815260043560048201528281602481855afa908115610574578391610552575b50825b815181101561054957336001600160a01b0361042e838561126b565b5116146104435761043e90611246565b610412565b505081925060015b156104fc575b5080546001600160a01b0316803b156104f9578180916084604051809481936368b3727760e11b83526004356004840152336024840152602435604484015260443560648401525af180156101b6576104e5575b50604051604435815234602082015260243590600435907ff85c915ce9c62984825f2ff42dc2ac372422bebf345a567590885dc78681325d60403392a480f35b6104ee90610e8d565b6101ee5780386104a5565b50fd5b803b156104f957816040518092635df1839160e11b82528183816105263360043560048401611323565b03925af180156101b657156104515761053e90610e8d565b6101ee578038610451565b5050819261044b565b61056e91503d8085833e6105668183610ea0565b8101906112a2565b3861040f565b6040513d85823e3d90fd5b61058890610e8d565b6101ee5780386103d8565b61059c90610e8d565b3861038c565b8280fd5b60405162461bcd60e51b8152602060048201526014602482015273125b98dbdc9c9958dd081d985b1d59481cd95b9d60621b6044820152606490fd5b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152601b60248201527a4e6f7420656e6f75676820617661696c61626c6520746f6b656e7360281b6044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f52657761726420646f6573206e6f7420657869737420666f72207468697320616044820152631cdcd95d60e21b6064820152608490fd5b5050505092935061030b565b606460405162461bcd60e51b815260206004820152602060248201527f50726f6a656374206973206e6f7420696e2053746172746564207374617475736044820152fd5b634e487b7160e01b85526021600452602485fd5b6107039193503d8086833e6101a78183610ea0565b9138610275565b6040513d86823e3d90fd5b6101e1915060203d6020116101e7576101d98183610ea0565b60405162461bcd60e51b815260206004820152602360248201527f546f6b656e20616d6f756e74206d75737420626520677265617465722074686160448201526206e20360ec1b6064820152608490fd5b5080fd5b82346101ee5760403660031901126101ee5760243590600435906001600160a01b03808416840361077f578154169260405193634f558e7960e01b85528360048601526020948581602481855afa90811561070a57906107e99185916108e75750610edb565b604051635dbf1c2d60e11b815293858580610808868560048401611323565b0381855afa94851561070a5784956108b2575b5060405163ebcab60560e01b81529392839285929091839182916108429160048401611323565b03915afa9182156101835790610886929181809361088a575b505061087890606060405196879687528601526060850190610dcc565b908382036040850152610dcc565b0390f35b61087893506108ab92503d8091833e6108a38183610ea0565b810190611416565b918661085b565b9094508581813d83116108e0575b6108ca8183610ea0565b810103126108dc57519361084261081b565b8380fd5b503d6108c0565b6108fe9150873d89116101e7576101d98183610ea0565b876100c0565b82346101ee57806003193601126101ee576002546040516001600160a01b039091168152602090f35b82346101ee57602090816003193601126101ee576004356001600160a01b03818116918290036105a25782541660405191633a79e15360e21b835260048301528282602481845afa918215610574578392610b10575b508151936109908561133c565b9361099a8661133c565b956109a48161136e565b936109ae8261136e565b95835b838110610a07576109de896108868a6109f98b8f8c6109eb9160405198899860808a5260808a0190610dcc565b9188830390890152610dcc565b908582036040870152610e00565b908382036060850152610e00565b610a11818361126b565b51604051635dbf1c2d60e11b8152878180610a326004358660048401611323565b0381885afa908115610ad4578791610adf575b50610a50838d61126b565b5260405163ebcab60560e01b8152868180610a716004358660048401611323565b0381885afa8015610ad45790610ab393929188918991610ab8575b50610a97848d61126b565b52610aa2838b61126b565b52610aad828c61126b565b52611246565b6109b1565b9050610ace91503d808a833e6108a38183610ea0565b8e610a8c565b6040513d89823e3d90fd5b90508781813d8311610b09575b610af68183610ea0565b81010312610b0557518c610a45565b8680fd5b503d610aec565b9091503d8084833e610b228183610ea0565b81019084818303126108dc578051906001600160401b038211610b5157610b4a9291016113b8565b9084610983565b8480fd5b82346101ee5760203660031901126101ee578054604051634f558e7960e01b815260048035908201526001600160a01b039291831690602081602481855afa9081156105745790610bac918491610d885750610edb565b6040516307c9054760e01b815260048035908201528281602481855afa908115610574578391610d6e575b50805190610be48261133c565b610bed8361136e565b92610bf78161136e565b94865b828110610c5a575050506040519460808601608087528351809152602060a088019401915b818110610c42578780610886896109f98a6109eb8b8b8782036020890152610dcc565b82518916855260209485019490920191600101610c1f565b88610c65828761126b565b5116604051635dbf1c2d60e11b815260208180610c888560043560048401611323565b0381875afa908115610d6357908a918291610d28575b5091610ccc92610cae858961126b565b526040518093819263ebcab60560e01b835260043560048401611323565b0381865afa8015610d1d5790610cfc92918a918b91610d01575b50610cf1838b61126b565b52610aad828961126b565b610bfa565b9050610d1791503d808c833e6108a38183610ea0565b8c610ce6565b6040513d8b823e3d90fd5b9150506020813d602011610d5b575b81610d4460209383610ea0565b81010312610d5757518990610ccc610c9e565b8980fd5b3d9150610d37565b6040513d8c823e3d90fd5b610d8291503d8085833e6105668183610ea0565b84610bd7565b610da1915060203d6020116101e7576101d98183610ea0565b856100c0565b83903461077f578160031936011261077f576001546001600160a01b03168152602090f35b90815180825260208080930193019160005b828110610dec575050505090565b835185529381019392810192600101610dde565b908082519081815260208091019281808460051b8301019501936000915b848310610e2e5750505050505090565b9091929394958480610e4c600193601f198682030187528a51610dcc565b9801930193019194939290610e1e565b60c081019081106001600160401b03821117610e7757604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111610e7757604052565b601f909101601f19168101906001600160401b03821190821017610e7757604052565b90816020910312610177575180151581036101775790565b15610ee257565b60405162461bcd60e51b8152602060048201526014602482015273105cdcd95d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b919080601f84011215610177578251906001600160401b038211610e775760405191602091610f56601f8301601f1916840185610ea0565b8184528282870101116101775760005b818110610f7b57508260009394955001015290565b8581018301518482018401528201610f66565b6001600160401b038111610e775760051b60200190565b51906001600160a01b038216820361017757565b60209182828203126101775781516001600160401b03928382116101775701916101a093848484031261017757604092835195860186811084821117610e7757845284518652818501518287015283850151838111610177578161101e918701610f1e565b84870152606080860151848111610177578261103b918801610f1e565b818801526080808701518581116101775783611058918901610f1e565b8189015260a09081880151828a015260c09182890151838b015260e08901518781116101775789019285601f850112156101775783519261109884610f8e565b956110a58b519788610ea0565b848752888088019560051b8701019588871161017757898101955b8787106111b557505050505050505060e087015261010080860151906004821015610177578701526101206110f6818701610fa5565b90870152610140808601518481116101775782611114918801610f1e565b9087015261016092838601518181116101775786019082601f830112156101775781519061114d61114483610f8e565b97519788610ea0565b818752848088019260051b8401019380851161017757858401925b8584106111905750505050505050830152610180809101519060058210156101775782015290565b83518381116101775787916111aa848480948a0101610f1e565b815201930192611168565b86518c811161017757820185601f19828d030112610177578c918e516111da81610e5c565b8d830151938411610177578f8f948f8f906111f792870101610f1e565b8252830151938411610177578f838f95918f61121990888d9581990101610f1e565b86850152888201519084015288810151888401528a810151898401520151898201528152019601956110c0565b60001981146112555760010190565b634e487b7160e01b600052601160045260246000fd5b805182101561127f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9190820391821161125557565b6020908181840312610177578051906001600160401b03821161017757019180601f840112156101775782516112d781610f8e565b936112e56040519586610ea0565b818552838086019260051b820101928311610177578301905b82821061130c575050505090565b83809161131884610fa5565b8152019101906112fe565b9081526001600160a01b03909116602082015260400190565b9061134682610f8e565b6113536040519182610ea0565b8281528092611364601f1991610f8e565b0190602036910137565b9061137882610f8e565b6113856040519182610ea0565b8281528092611396601f1991610f8e565b019060005b8281106113a757505050565b80606060208093850101520161139b565b81601f82011215610177578051916113cf83610f8e565b926113dd6040519485610ea0565b808452602092838086019260051b820101928311610177578301905b828210611407575050505090565b815181529083019083016113f9565b9190916040818403126101775780516001600160401b03939084811161017757816114429184016113b8565b9360208301519081116101775761145992016113b8565b9056fea264697066735822122086a1d8be9730b5e466827830571e6ea7f455a35dcaf2df1becf79207756bb90364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5505,
        "contract": "contracts/Investments.sol:Investments",
        "label": "nftContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(NFTVenture)7155"
      },
      {
        "astId": 5507,
        "contract": "contracts/Investments.sol:Investments",
        "label": "Reward_tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5509,
        "contract": "contracts/Investments.sol:Investments",
        "label": "supervisor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(NFTVenture)7155": {
        "encoding": "inplace",
        "label": "contract NFTVenture",
        "numberOfBytes": "20"
      }
    }
  }
}