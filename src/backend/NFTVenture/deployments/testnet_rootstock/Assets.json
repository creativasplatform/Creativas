{
  "address": "0x88ed56C855b3ae77AeE3e5BEF500DEa782363C92",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "AssetCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LogInvestment",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "author",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "projectEndDate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mainPhoto",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "secondaryPhotos",
          "type": "string[]"
        },
        {
          "internalType": "enum Category",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProjectStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "getAllAssets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "projectStartDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectEndDate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "individualPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardTokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Reward[]",
              "name": "rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "enum ProjectStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "mainPhoto",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "secondaryPhotos",
              "type": "string[]"
            },
            {
              "internalType": "enum Category",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct Asset[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProjectStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "enum Category",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "getAllAssetsByCategory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "projectStartDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectEndDate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "individualPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardTokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Reward[]",
              "name": "rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "enum ProjectStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "mainPhoto",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "secondaryPhotos",
              "type": "string[]"
            },
            {
              "internalType": "enum Category",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct Asset[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "getAssetById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "projectStartDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectEndDate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "individualPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardTokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Reward[]",
              "name": "rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "enum ProjectStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "mainPhoto",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "secondaryPhotos",
              "type": "string[]"
            },
            {
              "internalType": "enum Category",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct Asset",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAssetsOfOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "projectStartDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectEndDate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "individualPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardTokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Reward[]",
              "name": "rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "enum ProjectStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "mainPhoto",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "secondaryPhotos",
              "type": "string[]"
            },
            {
              "internalType": "enum Category",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct Asset[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supervisor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "mainPhoto",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "secondaryPhotos",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "updateAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x85322f6dc65281236670f623790001efc725519293904a9f62dd72e2662d3b24",
  "receipt": {
    "to": null,
    "from": "0x2F59A1cf89c1124c79A86118A9339772c7F63EAF",
    "contractAddress": "0x88ed56C855b3ae77AeE3e5BEF500DEa782363C92",
    "transactionIndex": 2,
    "gasUsed": "1481740",
    "logsBloom": "0x
    "blockHash": "0xd54ddfda8db4ec5eabc64f8ef679a8eb2e53f2d39e8d98754a8ac625191769e7",
    "transactionHash": "0x85322f6dc65281236670f623790001efc725519293904a9f62dd72e2662d3b24",
    "logs": [],
    "blockNumber": 5293211,
    "cumulativeGasUsed": "1621082",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x18feA9a72fe998f2f0643061FC2149F728D5475B"
  ],
  "numDeployments": 1,
  "solcInputHash": "289b62e2243967edd4cdb5ffc0cfa5dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"AssetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectEndDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"getAllAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectEndDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"getAllAssetsByCategory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectEndDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getAssetById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectEndDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAssetsOfOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectEndDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supervisor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"updateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Assets.sol\":\"Assets\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x3dce5847e70c056ef0f7cf91cb9a0067cf90784794017a45c1211cde7ed1c08c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd03f5c3d258a9b0f751a3246e0802106585561ab5909b808368759364fc786f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AssetStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nenum ProjectStatus {\\n    Started,\\n    Funded,\\n    Failed,\\n    Completed\\n}\\n\\nenum Category {\\n    Technology,\\n    Gaming,\\n    Music,\\n    Movies,\\n    Art\\n}\\n\\nstruct Reward {\\n    string title;\\n    string description;\\n    uint256 tokenAmount;\\n    uint256 individualPrice;\\n    uint256 availableTokens;\\n    uint256 rewardTokenId;\\n}\\n\\nstruct NewReward {\\n    string tokenURI;\\n    string title;\\n    string description;\\n    uint256 tokenAmount;\\n    uint256 individualPrice;\\n}\\n\\nstruct Asset {\\n    uint256 assetId;\\n    uint256 price;\\n    string author;\\n    string title;\\n    string description;\\n    uint256 projectStartDate;\\n    uint256 projectEndDate;\\n    Reward[] rewards;\\n    ProjectStatus status;\\n    address rewardTokenAddress;\\n    string mainPhoto;\\n    string[] secondaryPhotos;\\n    Category category;\\n}\\n\",\"keccak256\":\"0x2ffc38b9e3b4154b2c7ededb682535a9fd6dfb1419217873d7ff8c3dcbe3e9b4\",\"license\":\"MIT\"},\"contracts/Assets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <=0.8.19;\\r\\n\\r\\nimport \\\"./NFTVenture.sol\\\";\\r\\nimport \\\"./AssetStruct.sol\\\";\\r\\n\\r\\ncontract Assets {\\r\\n    NFTVenture private nftContract;\\r\\n    address public supervisor;\\r\\n\\r\\n    // Eventos\\r\\n    event LogInvestment(\\r\\n        address indexed investor,\\r\\n        uint256 indexed assetId,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 tokenAmount,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event AssetCreated(\\r\\n        uint256 indexed assetId,\\r\\n        address indexed owner,\\r\\n        string tokenURI\\r\\n    );\\r\\n\\r\\n    // Constructor\\r\\n    constructor(address nftAddress) {\\r\\n        nftContract = NFTVenture(nftAddress);\\r\\n        supervisor = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlySupervisor() {\\r\\n        require(\\r\\n            msg.sender == supervisor,\\r\\n            \\\"Only supervisor can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addAsset(\\r\\n        uint256 price,\\r\\n        string memory author,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        uint256 projectEndDate,\\r\\n        address to,\\r\\n        string memory tokenURI,\\r\\n        string memory mainPhoto,\\r\\n        string[] memory secondaryPhotos,\\r\\n        Category category\\r\\n    ) public onlySupervisor {\\r\\n        require(price != 0, \\\"Price cannot be zero\\\");\\r\\n        require(\\r\\n            projectEndDate >= block.timestamp,\\r\\n            \\\"Project end date should be in the future\\\"\\r\\n        );\\r\\n        require(to != address(0), \\\"Address cannot be zero\\\");\\r\\n\\r\\n        uint256 assetId = nftContract.getAssetsCount();\\r\\n\\r\\n        Reward[] memory emptyRewards;\\r\\n        Asset memory newAsset = Asset(\\r\\n            assetId,\\r\\n            price,\\r\\n            author,\\r\\n            title,\\r\\n            description,\\r\\n            block.timestamp,\\r\\n            projectEndDate,\\r\\n            emptyRewards,\\r\\n            ProjectStatus.Started,\\r\\n            address(0),\\r\\n            mainPhoto,\\r\\n            secondaryPhotos,\\r\\n            category\\r\\n        );\\r\\n        nftContract._addAsset(assetId, newAsset, to);\\r\\n\\r\\n        nftContract.mint(to, assetId, tokenURI);\\r\\n\\r\\n        emit AssetCreated(assetId, to, tokenURI);\\r\\n\\r\\n        nftContract.incrementAssetsCount();\\r\\n    }\\r\\n\\r\\n    function getAllAssets(\\r\\n        ProjectStatus status\\r\\n    ) public view returns (Asset[] memory, uint256[] memory, uint256[] memory) {\\r\\n        uint256[] memory assetIds;\\r\\n\\r\\n        if (status == ProjectStatus.Started) {\\r\\n            assetIds = nftContract.getActiveAssets();\\r\\n        } else if (status == ProjectStatus.Funded) {\\r\\n            assetIds = nftContract.getFundedAssets();\\r\\n        } else if (status == ProjectStatus.Failed) {\\r\\n            assetIds = nftContract.getFailedAssets();\\r\\n        } else if (status == ProjectStatus.Completed) {\\r\\n            assetIds = nftContract.getCompletedAssets();\\r\\n        } else {\\r\\n            revert(\\\"Invalid status\\\");\\r\\n        }\\r\\n\\r\\n        uint256 assetCount = assetIds.length;\\r\\n        Asset[] memory assets = new Asset[](assetCount);\\r\\n        uint256[] memory investmentAmounts = new uint256[](assetCount);\\r\\n        uint256[] memory investorCounts = new uint256[](assetCount);\\r\\n\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            assets[i] = nftContract.getAsset(assetIds[i]);\\r\\n            investmentAmounts[i] = nftContract.getTotalInvestment(assetIds[i]);\\r\\n            investorCounts[i] = nftContract.getTotalInvestors(assetIds[i]);\\r\\n        }\\r\\n\\r\\n        return (assets, investmentAmounts, investorCounts);\\r\\n    }\\r\\n\\r\\n    function getAllAssetsByCategory(\\r\\n        ProjectStatus status,\\r\\n        Category category\\r\\n    ) public view returns (Asset[] memory) {\\r\\n        uint256[] memory allAssetIds;\\r\\n\\r\\n        if (status == ProjectStatus.Started) {\\r\\n            allAssetIds = nftContract.getActiveAssets();\\r\\n        } else if (status == ProjectStatus.Funded) {\\r\\n            allAssetIds = nftContract.getFundedAssets();\\r\\n        } else if (status == ProjectStatus.Failed) {\\r\\n            allAssetIds = nftContract.getFailedAssets();\\r\\n        } else if (status == ProjectStatus.Completed) {\\r\\n            allAssetIds = nftContract.getCompletedAssets();\\r\\n        } else {\\r\\n            revert(\\\"Invalid status\\\");\\r\\n        }\\r\\n\\r\\n        uint256[] memory categoryAssetIds = nftContract.getAssetsByCategory(\\r\\n            category\\r\\n        );\\r\\n        uint256[] memory assetIds = new uint256[](categoryAssetIds.length);\\r\\n        uint256 count = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < allAssetIds.length; i++) {\\r\\n            assetIds[i] = allAssetIds[i];\\r\\n        }\\r\\n\\r\\n        Asset[] memory filteredAssets = new Asset[](categoryAssetIds.length);\\r\\n        for (uint256 i = 0; i < categoryAssetIds.length; i++) {\\r\\n            for (uint256 j = 0; j < assetIds.length; j++) {\\r\\n                if (categoryAssetIds[i] == assetIds[j]) {\\r\\n                    filteredAssets[count] = nftContract.getAsset(\\r\\n                        categoryAssetIds[i]\\r\\n                    );\\r\\n                    count++;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return filteredAssets;\\r\\n    }\\r\\n\\r\\n    function getAssetById(uint256 assetId) public view returns (Asset memory) {\\r\\n        return nftContract.getAsset(assetId);\\r\\n    }\\r\\n\\r\\n    function getAssetsOfOwner(\\r\\n        address owner\\r\\n    ) public view returns (Asset[] memory) {\\r\\n        uint256[] memory assetIds = nftContract.getAssetsOfOwner(owner);\\r\\n        uint256 assetCount = assetIds.length;\\r\\n        Asset[] memory assets = new Asset[](assetCount);\\r\\n\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            assets[i] = nftContract.getAsset(assetIds[i]);\\r\\n        }\\r\\n\\r\\n        return assets;\\r\\n    }\\r\\n\\r\\n    function updateAsset(\\r\\n        uint256 assetId,\\r\\n        string memory mainPhoto,\\r\\n        string[] memory secondaryPhotos,\\r\\n        string memory description\\r\\n    ) public {\\r\\n        require(nftContract.exists(assetId), \\\"Asset does not exist\\\");\\r\\n        require(\\r\\n            nftContract.isApprovedOrOwner(msg.sender, assetId),\\r\\n            \\\"Not approved or owner\\\"\\r\\n        );\\r\\n\\r\\n        Asset memory asset = nftContract.getAsset(assetId);\\r\\n\\r\\n        asset.mainPhoto = bytes(mainPhoto).length > 0\\r\\n            ? mainPhoto\\r\\n            : asset.mainPhoto;\\r\\n        asset.secondaryPhotos = secondaryPhotos.length > 0\\r\\n            ? secondaryPhotos\\r\\n            : asset.secondaryPhotos;\\r\\n        asset.description = bytes(description).length > 0\\r\\n            ? description\\r\\n            : asset.description;\\r\\n\\r\\n        nftContract.updateAsset(assetId, asset);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb17b528fd5db72e9140d09598dad8f5e3296574ff696c129a02e7d2bc5a4a430\",\"license\":\"MIT\"},\"contracts/NFTVenture.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"./AssetStruct.sol\\\";\\n\\ncontract NFTVenture is\\n    ERC721,\\n    ERC721Enumerable,\\n    ERC721URIStorage,\\n    Pausable,\\n    Ownable,\\n    ERC721Burnable\\n{\\n    // Assets\\n    uint256 public assetsCount;\\n    mapping(uint256 => Asset) public assetMap;\\n    mapping(uint256 => bool) public assetExists;\\n\\n    mapping(address => uint256[]) public ownerToAssets;\\n\\n    mapping(uint256 => address) public assetApprovals;\\n    mapping(uint256 => address) public assetOwner;\\n    mapping(address => uint256) public ownedAssetsCount;\\n\\n    // State-based Asset IDs\\n    uint256[] public activeAssets;\\n    uint256[] public fundedAssets;\\n    uint256[] public failedAssets;\\n    uint256[] public completedAssets;\\n\\n    // Category-based Asset IDs\\n    mapping(Category => uint256[]) public categoryAssets;\\n\\n    // Investments\\n    mapping(uint256 => mapping(address => uint256)) public investmentAmountOf;\\n    mapping(uint256 => uint256) public investmentReceived;\\n    mapping(uint256 => address[]) public assetInvestors;\\n    mapping(uint256 => bool) public isTransferAllowed;\\n    mapping(uint256 => bool) public isRefundingAllowed;\\n    mapping(uint256 => uint256) public investmentRefunded;\\n    mapping(uint256 => mapping(address => uint256)) public pendingReturns;\\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256)))\\n        public investorTokens;\\n    mapping(uint256 => uint256) public totalInvestors;\\n    mapping(uint256 => uint256) public totalInvestment;\\n    mapping(address => uint256[]) public investorAssets;\\n\\n    // Constructor\\n    constructor() ERC721(\\\"FractionalCTV\\\", \\\"FCTV\\\") {}\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function _burn(\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    modifier isNFTOwner(uint256 assetId) {\\n        require(msg.sender == ownerOf(assetId));\\n        _;\\n    }\\n\\n    function balanceOf() public view returns (uint256) {\\n        require(\\n            msg.sender != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return ownedAssetsCount[msg.sender];\\n    }\\n\\n    function ownerOf(\\n        uint256 assetId\\n    ) public view override(ERC721, IERC721) returns (address) {\\n        address owner = assetOwner[assetId];\\n        require(owner != address(0), \\\"NoAssetExists\\\");\\n        return owner;\\n    }\\n\\n    function approve(\\n        address to,\\n        uint256 assetId\\n    ) public override(ERC721, IERC721) {\\n        address owner = ownerOf(assetId);\\n        require(to != owner, \\\"CurrentOwnerApproval\\\");\\n        require(msg.sender == owner, \\\"NotTheAssetOwner\\\");\\n        assetApprovals[assetId] = to;\\n        emit Approval(owner, to, assetId);\\n    }\\n\\n    function getApproved(\\n        uint256 assetId\\n    ) public view override(ERC721, IERC721) returns (address) {\\n        require(\\n            _exists(assetId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n        return assetApprovals[assetId];\\n    }\\n\\n    function clearApproval(uint256 assetId, address approved) public {\\n        if (assetApprovals[assetId] == approved) {\\n            assetApprovals[assetId] = address(0);\\n        }\\n    }\\n\\n    function mint(address to, uint256 assetId, string memory asseturi) public {\\n        require(to != address(0), \\\"ZeroAddressMiniting\\\");\\n        _safeMint(to, assetId);\\n        _setTokenURI(assetId, asseturi);\\n        emit Transfer(address(0), to, assetId);\\n    }\\n\\n    function exists(uint256 assetId) public view returns (bool) {\\n        return assetExists[assetId];\\n    }\\n\\n    function isApprovedOrOwner(\\n        address spender,\\n        uint256 assetId\\n    ) external view returns (bool) {\\n        require(\\n            exists(assetId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(assetId);\\n        return (spender == owner || getApproved(assetId) == spender);\\n    }\\n\\n    function _addAsset(\\n        uint256 assetId,\\n        Asset memory asset,\\n        address to\\n    ) external {\\n        assetMap[assetId] = asset;\\n        assetOwner[assetId] = to;\\n        ownedAssetsCount[to]++;\\n        ownerToAssets[to].push(assetId);\\n        assetExists[assetId] = true;\\n        activeAssets.push(assetId);\\n        categoryAssets[asset.category].push(assetId);\\n    }\\n\\n    function getAsset(uint256 assetId) public view returns (Asset memory) {\\n        return assetMap[assetId];\\n    }\\n\\n    function updateAsset(uint256 assetId, Asset memory asset) public {\\n        assetMap[assetId] = asset;\\n    }\\n\\n    function getAssetsCount() public view returns (uint256) {\\n        return assetsCount;\\n    }\\n\\n    function incrementAssetsCount() public {\\n        assetsCount++;\\n    }\\n\\n    function getAssetsOfOwner(\\n        address owner\\n    ) public view returns (uint256[] memory) {\\n        return ownerToAssets[owner];\\n    }\\n\\n    function updateAssetReward(\\n        uint256 assetId,\\n        uint256 rewardIndex,\\n        uint256 newAvailableTokens\\n    ) external {\\n        require(\\n            rewardIndex < assetMap[assetId].rewards.length,\\n            \\\"Invalid reward index\\\"\\n        );\\n        assetMap[assetId]\\n            .rewards[rewardIndex]\\n            .availableTokens = newAvailableTokens;\\n    }\\n\\n    function handleRewardAddedToAsset(\\n        uint256 assetId,\\n        string memory title,\\n        string memory description,\\n        uint256 tokenAmount,\\n        uint256 individualPrice,\\n        bytes32 rewardId\\n    ) external {\\n        Asset storage asset = assetMap[assetId];\\n        asset.rewards.push(\\n            Reward({\\n                title: title,\\n                description: description,\\n                tokenAmount: tokenAmount,\\n                individualPrice: individualPrice,\\n                availableTokens: tokenAmount,\\n                rewardTokenId: uint256(rewardId)\\n            })\\n        );\\n    }\\n\\n    function updateRewardTokenAddress(\\n        uint256 assetId,\\n        address rewardTokenAddress\\n    ) external {\\n        assetMap[assetId].rewardTokenAddress = rewardTokenAddress;\\n    }\\n\\n    function addInvestment(\\n        uint256 assetId,\\n        address investor,\\n        uint256 amount\\n    ) external {\\n        investmentAmountOf[assetId][investor] += amount;\\n        investmentReceived[assetId] += amount;\\n        totalInvestment[assetId] += amount;\\n        if (investmentAmountOf[assetId][investor] == amount) {\\n            assetInvestors[assetId].push(investor);\\n            investorAssets[investor].push(assetId);\\n\\n            totalInvestors[assetId]++;\\n        }\\n    }\\n\\n    function getTotalInvestment(\\n        uint256 assetId\\n    ) external view returns (uint256) {\\n        return totalInvestment[assetId];\\n    }\\n\\n    function getTotalInvestors(\\n        uint256 assetId\\n    ) external view returns (uint256) {\\n        return totalInvestors[assetId];\\n    }\\n\\n    function addInvestor(uint256 assetId, address investor) external {\\n        assetInvestors[assetId].push(investor);\\n        investorAssets[investor].push(assetId);\\n    }\\n\\n    function getAssetInvestors(\\n        uint256 assetId\\n    ) external view returns (address[] memory) {\\n        return assetInvestors[assetId];\\n    }\\n\\n    function getInvestorAssets(\\n        address investor\\n    ) external view returns (uint256[] memory) {\\n        return investorAssets[investor];\\n    }\\n    function getInvestorTokens(\\n        uint256 assetId,\\n        address investor\\n    ) public view returns (uint256[] memory, uint256[] memory) {\\n        Asset memory asset = assetMap[assetId];\\n        uint256 rewardCount = asset.rewards.length;\\n\\n        uint256[] memory tokenIds = new uint256[](rewardCount);\\n        uint256[] memory tokenAmounts = new uint256[](rewardCount);\\n\\n        for (uint256 i = 0; i < rewardCount; i++) {\\n            uint256 tokenId = asset.rewards[i].rewardTokenId;\\n            tokenIds[i] = tokenId;\\n            tokenAmounts[i] = investorTokens[assetId][investor][tokenId];\\n        }\\n\\n        return (tokenIds, tokenAmounts);\\n    }\\n\\n    function getInvestmentAmount(\\n        uint256 assetId,\\n        address investor\\n    ) public view returns (uint256) {\\n        return investmentAmountOf[assetId][investor];\\n    }\\n\\n    function updateInvestorTokens(\\n        uint256 assetId,\\n        address investor,\\n        uint256 tokenId,\\n        uint256 tokenAmount\\n    ) external {\\n        investorTokens[assetId][investor][tokenId] = tokenAmount;\\n    }\\n\\n    function allowTransfers(uint256 assetId, bool allowed) external {\\n        isTransferAllowed[assetId] = allowed;\\n    }\\n\\n    function allowRefunding(uint256 assetId, bool allowed) external {\\n        isRefundingAllowed[assetId] = allowed;\\n    }\\n\\n    function updatePendingReturns(\\n        uint256 assetId,\\n        address investor,\\n        uint256 amount\\n    ) external {\\n        pendingReturns[assetId][investor] = amount;\\n    }\\n\\n    function updateInvestmentRefunded(\\n        uint256 assetId,\\n        uint256 amount\\n    ) external {\\n        investmentRefunded[assetId] = amount;\\n    }\\n\\n    function getActiveAssets() external view returns (uint256[] memory) {\\n        return activeAssets;\\n    }\\n\\n    function getFundedAssets() external view returns (uint256[] memory) {\\n        return fundedAssets;\\n    }\\n\\n    function getFailedAssets() external view returns (uint256[] memory) {\\n        return failedAssets;\\n    }\\n\\n    function getCompletedAssets() external view returns (uint256[] memory) {\\n        return completedAssets;\\n    }\\n\\n    function getAssetsByCategory(\\n        Category category\\n    ) external view returns (uint256[] memory) {\\n        return categoryAssets[category];\\n    }\\n}\\n\",\"keccak256\":\"0xfe8b84cc7cf611042e781969058a556bbdef20e9d3d6073a89df555c628fffc7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007c57601f6119a238819003918201601f19168301916001600160401b038311848410176100815780849260209460405283398101031261007c57516001600160a01b0381169081900361007c5760018060a01b0319908160005416176000553390600154161760015560405161190a90816100988239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c9081633803112314610c94575080634663a28c146109855780635563633d146106f257806356e4b68b146106c957806386275c5a14610248578063b3e444a7146101b35763f3ab880e1461006e57600080fd5b346101b05760203660031901126101b0576004356001600160a01b0381811692918390036101ab57815416604051926379d5c40760e11b8452600484015260249082848381845afa9384156101a057839461017c575b508351916100d1836114fe565b94845b8481106100f557604051602080825281906100f19082018a61120a565b0390f35b6100ff81836115a5565b5160405190631d591eb760e31b8252600482015286818581885afa908115610171579061014a9291889161014f575b50610139828a6115a5565b5261014481896115a5565b50611580565b6100d4565b61016b91503d808a833e61016381836112df565b810190611611565b3861012e565b6040513d89823e3d90fd5b6101999194503d8085833e61019181836112df565b810190611424565b92386100c4565b6040513d85823e3d90fd5b600080fd5b80fd5b50346101b05760203660031901126101b0576101cd61149d565b508054604051631d591eb760e31b81526004803590820152908290829060249082906001600160a01b03165afa90811561023d57826100f19392610222575b5050604051918291602083526020830190611034565b61023692503d8091833e61016381836112df565b388061020c565b6040513d84823e3d90fd5b50346101b0576101403660031901126101b0576001600160401b0360243581811161055e5761027b90369060040161131d565b6044358281116105425761029390369060040161131d565b906064358381116106c5576102ac90369060040161131d565b9260a435916001600160a01b03831683036101ab5760c4358281116106c1576102d990369060040161131d565b9460e4358381116106bd576102f290369060040161131d565b92610104359081116106bd5761030c90369060040161137b565b60056101243510156106bd576001546001600160a01b03163303610669576004351561062d5742608435106105d7576001600160a01b03851615610599578754604051630aac5dfd60e01b81529689956001600160a01b039092169390602089600481885afa988915610171578799610562575b506040519561038e876112c3565b89875260043560208801526040870152606086015260808501524260a085015260843560c0850152606060e0850152846101008501528461012085015261014084015261016083015261012435610180830152803b1561055e5761041a8392918392604051948580948193631b8513e960e31b83528b6004840152606060248401526064830190611034565b6001600160a01b038a16604483015203925af1801561023d5761054a575b5080546001600160a01b0316803b15610546576040516334ff261960e21b81526001600160a01b03841660048201526024810185905260606044820152908290829081838161048a606482018c610fec565b03925af1801561023d5761052e575b505060405160208082526001600160a01b03909216937f49b4e4c6879cdc85b51d8c3b572252aaa7842edb863810854acb6d2ed420d9629282916104df91830190610fec565b0390a3805481906001600160a01b0316803b1561052b57818091600460405180948193632c5bdb1f60e01b83525af1801561023d5761051b5750f35b6105249061129a565b6101b05780f35b50fd5b6105379061129a565b610542578338610499565b8380fd5b5080fd5b6105539061129a565b610542578338610438565b8280fd5b965097506020863d602011610591575b8161057f602093836112df565b810103126101ab578995519738610380565b3d9150610572565b60405162461bcd60e51b8152602060048201526016602482015275416464726573732063616e6e6f74206265207a65726f60501b6044820152606490fd5b60405162461bcd60e51b815260206004820152602860248201527f50726f6a65637420656e6420646174652073686f756c6420626520696e207468604482015267652066757475726560c01b6064820152608490fd5b60405162461bcd60e51b815260206004820152601460248201527350726963652063616e6e6f74206265207a65726f60601b6044820152606490fd5b60405162461bcd60e51b815260206004820152602660248201527f4f6e6c792073757065727669736f722063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b6064820152608490fd5b8780fd5b8680fd5b8480fd5b50346101b057806003193601126101b0576001546040516001600160a01b039091168152602090f35b50346101b05760803660031901126101b0576024906001600160401b0360043583358281116105425761072990369060040161131d565b916044358181116106c55761074290369060040161137b565b906064359081116106c55761075b90369060040161131d565b8454604051634f558e7960e01b8152600481018590526001600160a01b03909116929060209081818a81885afa908115610923578891610968575b501561092e5760405163430c208160e01b81523360048201528881018690528181604481885afa9081156109235788916108f6575b50156108bb575085939291879160405196631d591eb760e31b885285600489015286888581885afa97881561017157879861089f575b50805115610893575b610140880152805115610887575b61016087015280511561087c575b6080860152813b15610542578360409361085e855197889687958694631c29952960e31b865260048601528401526044830190611034565b03925af1801561023d57610870575080f35b6108799061129a565b80f35b506080850151610826565b50610160860151610818565b5061014087015161080a565b6108b49198503d8089833e61016381836112df565b9689610801565b6064906015896040519262461bcd60e51b84526004840152820152742737ba1030b8383937bb32b21037b91037bbb732b960591b6044820152fd5b6109169150823d841161091c575b61090e81836112df565b8101906118bc565b386107cb565b503d610904565b6040513d8a823e3d90fd5b6064906014896040519262461bcd60e51b8452600484015282015273105cdcd95d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152fd5b61097f9150823d841161091c5761090e81836112df565b38610796565b50346101b05760403660031901126101b057600435600481101561054657602480359160058310156105425780610b9c575082546040516301fb15dd60e31b8152908490829060049082906001600160a01b03165afa908115610b91578491610b77575b50925b805460405163a2311d5f60e01b81526001600160a01b0390911693610a15906004830190611011565b81818481875afa90811561023d578291610b5d575b50610a35815161154e565b928290835b8751811015610a675780610a51610a62928a6115a5565b51610a5c82896115a5565b52611580565b610a3a565b5090919294610a7684516114fe565b9186945b8051861015610b4757875b8751811015610b3c57610a9887836115a5565b51610aa3828a6115a5565b5114610ab757610ab290611580565b610a85565b509493610ac485876115a5565b5160405190631d591eb760e31b8252600482015288818481875afa918215610b3157610b1192610b0b928b91610b17575b50610b0082886115a5565b5261014481876115a5565b94611580565b94610a7a565b610b2b91503d808d833e61016381836112df565b8b610af5565b6040513d8b823e3d90fd5b5094610b1190611580565b604051602080825281906100f19082018761120a565b610b7191503d8084833e61019181836112df565b38610a2a565b610b8b91503d8086833e61019181836112df565b386109e9565b6040513d86823e3d90fd5b60018103610bf757508254604051620dee2360e51b8152908490829060049082906001600160a01b03165afa908115610b91578491610bdd575b50926109ec565b610bf191503d8086833e61019181836112df565b38610bd6565b60028103610c3857508254604051630f4facc560e21b8152908490829060049082906001600160a01b03165afa908115610b91578491610bdd5750926109ec565b600303610c77578254604051635aff92c160e11b8152908490829060049082906001600160a01b03165afa908115610b91578491610bdd5750926109ec565b60405162461bcd60e51b815280610c90600482016113fb565b0390fd5b82346101b0576020918260031936011261054657600435600481101561055e5780610ed557505080546040516301fb15dd60e31b8152908290829060049082906001600160a01b03165afa90811561023d578291610ebb575b50905b815191610cfc836114fe565b92610d068161154e565b91610d108261154e565b845490946001600160a01b0390911691815b848110610d6557610d4a886100f189610d578d8b60405196879660608852606088019061120a565b9186830390870152611266565b908382036040850152611266565b610d6f81836115a5565b519060405191631d591eb760e31b8352600483015260249184818481895afa908115610e96578591610ea1575b50610da7828b6115a5565b52610db2818a6115a5565b50610dbd81846115a5565b51604051906334422a4760e01b825260048201528a818481895afa908115610e96578591610e69575b50610df182896115a5565b5289610dfd82856115a5565b51604051938491631d6e430760e11b8352600483015281885afa8015610b91578490610e38575b610e339250610a5c828a6115a5565b610d22565b50908981813d8311610e62575b610e4f81836112df565b810103126105425790610e339151610e24565b503d610e45565b90508a81813d8311610e8f575b610e8081836112df565b810103126106c557518b610de6565b503d610e76565b6040513d87823e3d90fd5b610eb591503d8087833e61016381836112df565b8b610d9c565b610ecf91503d8084833e61019181836112df565b83610ced565b60018103610f315750508054604051620dee2360e51b8152908290829060049082906001600160a01b03165afa90811561023d578291610f17575b5090610cf0565b610f2b91503d8084833e61019181836112df565b83610f10565b60028103610f735750508054604051630f4facc560e21b8152908290829060049082906001600160a01b03165afa90811561023d578291610f17575090610cf0565b600303610fb357508054604051635aff92c160e11b8152908290829060049082906001600160a01b03165afa90811561023d578291610f17575090610cf0565b62461bcd60e51b815280610c90600482016113fb565b60005b838110610fdc5750506000910152565b8181015183820152602001610fcc565b9060209161100581518092818552858086019101610fc9565b601f01601f1916010190565b90600582101561101e5752565b634e487b7160e01b600052602160045260246000fd5b9190825181526020908184015182820152604061105e818601516101a08084860152840190610fec565b6110746060918288015185820384870152610fec565b9161108b6080938489015186820386880152610fec565b60a093848901518587015260c092838a01518488015260e08a01519587840360e0890152865194858552898501938a808860051b8801019901976000965b8c8989106111975750505050505050505050506101009081860151600481101561101e5761111b9284015261012060018060a01b03818801511690840152610140808701519084830390850152610fec565b936101609283820151938387039084015283518087528187019180808360051b8a01019601926000905b83821061116a5750505050506111679293945061018080910151910190611011565b90565b909192939683806111886001938d601f199082030186528b51610fec565b99019201920190939291611145565b80600192939495969798999a9b9c601f19858203018b528d519089806111d76111c785518d86528d860190610fec565b8686015185820388870152610fec565b938d8082015190850152898101518a8501528a8101518b85015201519101529c01980198019698979594939291906110c9565b908082519081815260208091019281808460051b8301019501936000915b8483106112385750505050505090565b9091929394958480611256600193601f198682030187528a51611034565b9801930193019194939290611228565b90815180825260208080930193019160005b828110611286575050505090565b835185529381019392810192600101611278565b6001600160401b0381116112ad57604052565b634e487b7160e01b600052604160045260246000fd5b6101a081019081106001600160401b038211176112ad57604052565b601f909101601f19168101906001600160401b038211908210176112ad57604052565b6001600160401b0381116112ad57601f01601f191660200190565b81601f820112156101ab5780359061133482611302565b9261134260405194856112df565b828452602083830101116101ab57816000926020809301838601378301015290565b6001600160401b0381116112ad5760051b60200190565b9080601f830112156101ab5781359061139382611364565b926113a160405194856112df565b828452602092838086019160051b830101928084116101ab57848301915b8483106113cf5750505050505090565b82356001600160401b0381116101ab5786916113f08484809489010161131d565b8152019201916113bf565b60609060208152600e60208201526d496e76616c69642073746174757360901b60408201520190565b60209081818403126101ab578051906001600160401b0382116101ab57019180601f840112156101ab57825161145981611364565b9361146760405195866112df565b818552838086019260051b8201019283116101ab578301905b82821061148e575050505090565b81518152908301908301611480565b604051906114aa826112c3565b81610180600091828152826020820152606080604083015280808301528060808301528360a08301528360c08301528060e08301528361010083015283610120830152806101408301526101608201520152565b9061150882611364565b61151560405191826112df565b8281528092611526601f1991611364565b019060005b82811061153757505050565b60209061154261149d565b8282850101520161152b565b9061155882611364565b61156560405191826112df565b8281528092611576601f1991611364565b0190602036910137565b600019811461158f5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156115b95760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b81601f820112156101ab5780516115e581611302565b926115f360405194856112df565b818452602082840101116101ab576111679160208085019101610fc9565b602080828403126101ab5781516001600160401b03928382116101ab5701916101a0838503126101ab5760409182519461164a866112c3565b845186528185015182870152838501518381116101ab578161166d9187016115cf565b848701526060808601518481116101ab578261168a9188016115cf565b818801526080808701518581116101ab57836116a79189016115cf565b8189015260a09081880151828a015260c09182890151838b015260e08901518781116101ab5789019285601f850112156101ab578351926116e784611364565b956116f48b5197886112df565b848752888088019560051b870101958887116101ab57898101955b87871061180d57505050505050505060e0870152610100808601519060048210156101ab5787015261012085810151906001600160a01b03821682036101ab57870152610140808601518481116101ab578261176c9188016115cf565b9087015261016092838601518181116101ab5786019082601f830112156101ab578151906117a561179c83611364565b975197886112df565b818752848088019260051b840101938085116101ab57858401925b8584106117e85750505050505050830152610180809101519060058210156101ab5782015290565b83518381116101ab578791611802848480948a01016115cf565b8152019301926117c0565b86518c81116101ab57820185601f19828d0301126101ab578d5186810192908e8411818510176118a757928f52818d0151928e84116101ab578f8f948f8f90611858928701016115cf565b82528301519384116101ab578f838f95918f61187a90888d95819901016115cf565b86850152888201519084015288810151888401528a8101518984015201518982015281520196019561170f565b60246000634e487b7160e01b81526041600452fd5b908160209103126101ab575180151581036101ab579056fea2646970667358221220c7ef6d38c6a1fc5f2261734b79d582d2f9ddb4de8debdc97f69db8d31cbc94da64736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081633803112314610c94575080634663a28c146109855780635563633d146106f257806356e4b68b146106c957806386275c5a14610248578063b3e444a7146101b35763f3ab880e1461006e57600080fd5b346101b05760203660031901126101b0576004356001600160a01b0381811692918390036101ab57815416604051926379d5c40760e11b8452600484015260249082848381845afa9384156101a057839461017c575b508351916100d1836114fe565b94845b8481106100f557604051602080825281906100f19082018a61120a565b0390f35b6100ff81836115a5565b5160405190631d591eb760e31b8252600482015286818581885afa908115610171579061014a9291889161014f575b50610139828a6115a5565b5261014481896115a5565b50611580565b6100d4565b61016b91503d808a833e61016381836112df565b810190611611565b3861012e565b6040513d89823e3d90fd5b6101999194503d8085833e61019181836112df565b810190611424565b92386100c4565b6040513d85823e3d90fd5b600080fd5b80fd5b50346101b05760203660031901126101b0576101cd61149d565b508054604051631d591eb760e31b81526004803590820152908290829060249082906001600160a01b03165afa90811561023d57826100f19392610222575b5050604051918291602083526020830190611034565b61023692503d8091833e61016381836112df565b388061020c565b6040513d84823e3d90fd5b50346101b0576101403660031901126101b0576001600160401b0360243581811161055e5761027b90369060040161131d565b6044358281116105425761029390369060040161131d565b906064358381116106c5576102ac90369060040161131d565b9260a435916001600160a01b03831683036101ab5760c4358281116106c1576102d990369060040161131d565b9460e4358381116106bd576102f290369060040161131d565b92610104359081116106bd5761030c90369060040161137b565b60056101243510156106bd576001546001600160a01b03163303610669576004351561062d5742608435106105d7576001600160a01b03851615610599578754604051630aac5dfd60e01b81529689956001600160a01b039092169390602089600481885afa988915610171578799610562575b506040519561038e876112c3565b89875260043560208801526040870152606086015260808501524260a085015260843560c0850152606060e0850152846101008501528461012085015261014084015261016083015261012435610180830152803b1561055e5761041a8392918392604051948580948193631b8513e960e31b83528b6004840152606060248401526064830190611034565b6001600160a01b038a16604483015203925af1801561023d5761054a575b5080546001600160a01b0316803b15610546576040516334ff261960e21b81526001600160a01b03841660048201526024810185905260606044820152908290829081838161048a606482018c610fec565b03925af1801561023d5761052e575b505060405160208082526001600160a01b03909216937f49b4e4c6879cdc85b51d8c3b572252aaa7842edb863810854acb6d2ed420d9629282916104df91830190610fec565b0390a3805481906001600160a01b0316803b1561052b57818091600460405180948193632c5bdb1f60e01b83525af1801561023d5761051b5750f35b6105249061129a565b6101b05780f35b50fd5b6105379061129a565b610542578338610499565b8380fd5b5080fd5b6105539061129a565b610542578338610438565b8280fd5b965097506020863d602011610591575b8161057f602093836112df565b810103126101ab578995519738610380565b3d9150610572565b60405162461bcd60e51b8152602060048201526016602482015275416464726573732063616e6e6f74206265207a65726f60501b6044820152606490fd5b60405162461bcd60e51b815260206004820152602860248201527f50726f6a65637420656e6420646174652073686f756c6420626520696e207468604482015267652066757475726560c01b6064820152608490fd5b60405162461bcd60e51b815260206004820152601460248201527350726963652063616e6e6f74206265207a65726f60601b6044820152606490fd5b60405162461bcd60e51b815260206004820152602660248201527f4f6e6c792073757065727669736f722063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b6064820152608490fd5b8780fd5b8680fd5b8480fd5b50346101b057806003193601126101b0576001546040516001600160a01b039091168152602090f35b50346101b05760803660031901126101b0576024906001600160401b0360043583358281116105425761072990369060040161131d565b916044358181116106c55761074290369060040161137b565b906064359081116106c55761075b90369060040161131d565b8454604051634f558e7960e01b8152600481018590526001600160a01b03909116929060209081818a81885afa908115610923578891610968575b501561092e5760405163430c208160e01b81523360048201528881018690528181604481885afa9081156109235788916108f6575b50156108bb575085939291879160405196631d591eb760e31b885285600489015286888581885afa97881561017157879861089f575b50805115610893575b610140880152805115610887575b61016087015280511561087c575b6080860152813b15610542578360409361085e855197889687958694631c29952960e31b865260048601528401526044830190611034565b03925af1801561023d57610870575080f35b6108799061129a565b80f35b506080850151610826565b50610160860151610818565b5061014087015161080a565b6108b49198503d8089833e61016381836112df565b9689610801565b6064906015896040519262461bcd60e51b84526004840152820152742737ba1030b8383937bb32b21037b91037bbb732b960591b6044820152fd5b6109169150823d841161091c575b61090e81836112df565b8101906118bc565b386107cb565b503d610904565b6040513d8a823e3d90fd5b6064906014896040519262461bcd60e51b8452600484015282015273105cdcd95d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152fd5b61097f9150823d841161091c5761090e81836112df565b38610796565b50346101b05760403660031901126101b057600435600481101561054657602480359160058310156105425780610b9c575082546040516301fb15dd60e31b8152908490829060049082906001600160a01b03165afa908115610b91578491610b77575b50925b805460405163a2311d5f60e01b81526001600160a01b0390911693610a15906004830190611011565b81818481875afa90811561023d578291610b5d575b50610a35815161154e565b928290835b8751811015610a675780610a51610a62928a6115a5565b51610a5c82896115a5565b52611580565b610a3a565b5090919294610a7684516114fe565b9186945b8051861015610b4757875b8751811015610b3c57610a9887836115a5565b51610aa3828a6115a5565b5114610ab757610ab290611580565b610a85565b509493610ac485876115a5565b5160405190631d591eb760e31b8252600482015288818481875afa918215610b3157610b1192610b0b928b91610b17575b50610b0082886115a5565b5261014481876115a5565b94611580565b94610a7a565b610b2b91503d808d833e61016381836112df565b8b610af5565b6040513d8b823e3d90fd5b5094610b1190611580565b604051602080825281906100f19082018761120a565b610b7191503d8084833e61019181836112df565b38610a2a565b610b8b91503d8086833e61019181836112df565b386109e9565b6040513d86823e3d90fd5b60018103610bf757508254604051620dee2360e51b8152908490829060049082906001600160a01b03165afa908115610b91578491610bdd575b50926109ec565b610bf191503d8086833e61019181836112df565b38610bd6565b60028103610c3857508254604051630f4facc560e21b8152908490829060049082906001600160a01b03165afa908115610b91578491610bdd5750926109ec565b600303610c77578254604051635aff92c160e11b8152908490829060049082906001600160a01b03165afa908115610b91578491610bdd5750926109ec565b60405162461bcd60e51b815280610c90600482016113fb565b0390fd5b82346101b0576020918260031936011261054657600435600481101561055e5780610ed557505080546040516301fb15dd60e31b8152908290829060049082906001600160a01b03165afa90811561023d578291610ebb575b50905b815191610cfc836114fe565b92610d068161154e565b91610d108261154e565b845490946001600160a01b0390911691815b848110610d6557610d4a886100f189610d578d8b60405196879660608852606088019061120a565b9186830390870152611266565b908382036040850152611266565b610d6f81836115a5565b519060405191631d591eb760e31b8352600483015260249184818481895afa908115610e96578591610ea1575b50610da7828b6115a5565b52610db2818a6115a5565b50610dbd81846115a5565b51604051906334422a4760e01b825260048201528a818481895afa908115610e96578591610e69575b50610df182896115a5565b5289610dfd82856115a5565b51604051938491631d6e430760e11b8352600483015281885afa8015610b91578490610e38575b610e339250610a5c828a6115a5565b610d22565b50908981813d8311610e62575b610e4f81836112df565b810103126105425790610e339151610e24565b503d610e45565b90508a81813d8311610e8f575b610e8081836112df565b810103126106c557518b610de6565b503d610e76565b6040513d87823e3d90fd5b610eb591503d8087833e61016381836112df565b8b610d9c565b610ecf91503d8084833e61019181836112df565b83610ced565b60018103610f315750508054604051620dee2360e51b8152908290829060049082906001600160a01b03165afa90811561023d578291610f17575b5090610cf0565b610f2b91503d8084833e61019181836112df565b83610f10565b60028103610f735750508054604051630f4facc560e21b8152908290829060049082906001600160a01b03165afa90811561023d578291610f17575090610cf0565b600303610fb357508054604051635aff92c160e11b8152908290829060049082906001600160a01b03165afa90811561023d578291610f17575090610cf0565b62461bcd60e51b815280610c90600482016113fb565b60005b838110610fdc5750506000910152565b8181015183820152602001610fcc565b9060209161100581518092818552858086019101610fc9565b601f01601f1916010190565b90600582101561101e5752565b634e487b7160e01b600052602160045260246000fd5b9190825181526020908184015182820152604061105e818601516101a08084860152840190610fec565b6110746060918288015185820384870152610fec565b9161108b6080938489015186820386880152610fec565b60a093848901518587015260c092838a01518488015260e08a01519587840360e0890152865194858552898501938a808860051b8801019901976000965b8c8989106111975750505050505050505050506101009081860151600481101561101e5761111b9284015261012060018060a01b03818801511690840152610140808701519084830390850152610fec565b936101609283820151938387039084015283518087528187019180808360051b8a01019601926000905b83821061116a5750505050506111679293945061018080910151910190611011565b90565b909192939683806111886001938d601f199082030186528b51610fec565b99019201920190939291611145565b80600192939495969798999a9b9c601f19858203018b528d519089806111d76111c785518d86528d860190610fec565b8686015185820388870152610fec565b938d8082015190850152898101518a8501528a8101518b85015201519101529c01980198019698979594939291906110c9565b908082519081815260208091019281808460051b8301019501936000915b8483106112385750505050505090565b9091929394958480611256600193601f198682030187528a51611034565b9801930193019194939290611228565b90815180825260208080930193019160005b828110611286575050505090565b835185529381019392810192600101611278565b6001600160401b0381116112ad57604052565b634e487b7160e01b600052604160045260246000fd5b6101a081019081106001600160401b038211176112ad57604052565b601f909101601f19168101906001600160401b038211908210176112ad57604052565b6001600160401b0381116112ad57601f01601f191660200190565b81601f820112156101ab5780359061133482611302565b9261134260405194856112df565b828452602083830101116101ab57816000926020809301838601378301015290565b6001600160401b0381116112ad5760051b60200190565b9080601f830112156101ab5781359061139382611364565b926113a160405194856112df565b828452602092838086019160051b830101928084116101ab57848301915b8483106113cf5750505050505090565b82356001600160401b0381116101ab5786916113f08484809489010161131d565b8152019201916113bf565b60609060208152600e60208201526d496e76616c69642073746174757360901b60408201520190565b60209081818403126101ab578051906001600160401b0382116101ab57019180601f840112156101ab57825161145981611364565b9361146760405195866112df565b818552838086019260051b8201019283116101ab578301905b82821061148e575050505090565b81518152908301908301611480565b604051906114aa826112c3565b81610180600091828152826020820152606080604083015280808301528060808301528360a08301528360c08301528060e08301528361010083015283610120830152806101408301526101608201520152565b9061150882611364565b61151560405191826112df565b8281528092611526601f1991611364565b019060005b82811061153757505050565b60209061154261149d565b8282850101520161152b565b9061155882611364565b61156560405191826112df565b8281528092611576601f1991611364565b0190602036910137565b600019811461158f5760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156115b95760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b81601f820112156101ab5780516115e581611302565b926115f360405194856112df565b818452602082840101116101ab576111679160208085019101610fc9565b602080828403126101ab5781516001600160401b03928382116101ab5701916101a0838503126101ab5760409182519461164a866112c3565b845186528185015182870152838501518381116101ab578161166d9187016115cf565b848701526060808601518481116101ab578261168a9188016115cf565b818801526080808701518581116101ab57836116a79189016115cf565b8189015260a09081880151828a015260c09182890151838b015260e08901518781116101ab5789019285601f850112156101ab578351926116e784611364565b956116f48b5197886112df565b848752888088019560051b870101958887116101ab57898101955b87871061180d57505050505050505060e0870152610100808601519060048210156101ab5787015261012085810151906001600160a01b03821682036101ab57870152610140808601518481116101ab578261176c9188016115cf565b9087015261016092838601518181116101ab5786019082601f830112156101ab578151906117a561179c83611364565b975197886112df565b818752848088019260051b840101938085116101ab57858401925b8584106117e85750505050505050830152610180809101519060058210156101ab5782015290565b83518381116101ab578791611802848480948a01016115cf565b8152019301926117c0565b86518c81116101ab57820185601f19828d0301126101ab578d5186810192908e8411818510176118a757928f52818d0151928e84116101ab578f8f948f8f90611858928701016115cf565b82528301519384116101ab578f838f95918f61187a90888d95819901016115cf565b86850152888201519084015288810151888401528a8101518984015201518982015281520196019561170f565b60246000634e487b7160e01b81526041600452fd5b908160209103126101ab575180151581036101ab579056fea2646970667358221220c7ef6d38c6a1fc5f2261734b79d582d2f9ddb4de8debdc97f69db8d31cbc94da64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4661,
        "contract": "contracts/Assets.sol:Assets",
        "label": "nftContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(NFTVenture)7155"
      },
      {
        "astId": 4663,
        "contract": "contracts/Assets.sol:Assets",
        "label": "supervisor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(NFTVenture)7155": {
        "encoding": "inplace",
        "label": "contract NFTVenture",
        "numberOfBytes": "20"
      }
    }
  }
}