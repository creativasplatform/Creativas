{
  "address": "0x32178a14A8Bff131DbCE3646294143298a311273",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "AssetCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LogInvestment",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "author",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "projectEndDate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "mainPhoto",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "secondaryPhotos",
          "type": "string[]"
        },
        {
          "internalType": "enum Category",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProjectStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "getAllAssets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "projectStartDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectEndDate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "individualPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardTokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Reward[]",
              "name": "rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "enum ProjectStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "mainPhoto",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "secondaryPhotos",
              "type": "string[]"
            },
            {
              "internalType": "enum Category",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct Asset[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProjectStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "enum Category",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "getAllAssetsByCategory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "projectStartDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectEndDate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "individualPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardTokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Reward[]",
              "name": "rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "enum ProjectStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "mainPhoto",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "secondaryPhotos",
              "type": "string[]"
            },
            {
              "internalType": "enum Category",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct Asset[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "getAssetById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "projectStartDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectEndDate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "individualPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardTokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Reward[]",
              "name": "rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "enum ProjectStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "mainPhoto",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "secondaryPhotos",
              "type": "string[]"
            },
            {
              "internalType": "enum Category",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct Asset",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getAssetsOfOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "projectStartDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectEndDate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "individualPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "availableTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardTokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Reward[]",
              "name": "rewards",
              "type": "tuple[]"
            },
            {
              "internalType": "enum ProjectStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "rewardTokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "mainPhoto",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "secondaryPhotos",
              "type": "string[]"
            },
            {
              "internalType": "enum Category",
              "name": "category",
              "type": "uint8"
            }
          ],
          "internalType": "struct Asset[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supervisor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "mainPhoto",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "secondaryPhotos",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "updateAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf93837b729c796969812e9b43d7f0dbb02959101b5da4ab05dcef43ef4453e27",
  "receipt": {
    "to": null,
    "from": "0x2F59A1cf89c1124c79A86118A9339772c7F63EAF",
    "contractAddress": "0x32178a14A8Bff131DbCE3646294143298a311273",
    "transactionIndex": 2,
    "gasUsed": "1582192",
    "logsBloom": "0x
    "blockHash": "0xcda32e64d13859cfb62d790a740839f7d446eb84a499c5cb6b4e63631367a5c0",
    "transactionHash": "0xf93837b729c796969812e9b43d7f0dbb02959101b5da4ab05dcef43ef4453e27",
    "logs": [],
    "blockNumber": 5294088,
    "cumulativeGasUsed": "1663173",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x72033e81978378f7FB383472c8F993f597022091"
  ],
  "numDeployments": 1,
  "solcInputHash": "86a9435e8656c3c6c587cdad6f3676cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"AssetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectEndDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"getAllAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectEndDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"getAllAssetsByCategory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectEndDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getAssetById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectEndDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAssetsOfOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectStartDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectEndDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"individualPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct Reward[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"},{\"internalType\":\"enum ProjectStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"enum Category\",\"name\":\"category\",\"type\":\"uint8\"}],\"internalType\":\"struct Asset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supervisor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"mainPhoto\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"secondaryPhotos\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"updateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Assets.sol\":\"Assets\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x8d1cabca557cb77d97d801d674f0dacc33659e1430cdd34f91ae5d033fc3d93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x3dce5847e70c056ef0f7cf91cb9a0067cf90784794017a45c1211cde7ed1c08c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd03f5c3d258a9b0f751a3246e0802106585561ab5909b808368759364fc786f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AssetStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nenum ProjectStatus {\\n    Started,\\n    Funded,\\n    Failed,\\n    Completed\\n}\\n\\nenum Category {\\n    Technology,\\n    Gaming,\\n    Music,\\n    Movies,\\n    Art\\n}\\n\\nstruct Reward {\\n    string title;\\n    string description;\\n    uint256 tokenAmount;\\n    uint256 individualPrice;\\n    uint256 availableTokens;\\n    uint256 rewardTokenId;\\n}\\n\\nstruct NewReward {\\n    string tokenURI;\\n    string title;\\n    string description;\\n    uint256 tokenAmount;\\n    uint256 individualPrice;\\n}\\n\\nstruct Asset {\\n    uint256 assetId;\\n    uint256 price;\\n    string author;\\n    string title;\\n    string description;\\n    uint256 projectStartDate;\\n    uint256 projectEndDate;\\n    Reward[] rewards;\\n    ProjectStatus status;\\n    address rewardTokenAddress;\\n    string mainPhoto;\\n    string[] secondaryPhotos;\\n    Category category;\\n}\\n\",\"keccak256\":\"0x2ffc38b9e3b4154b2c7ededb682535a9fd6dfb1419217873d7ff8c3dcbe3e9b4\",\"license\":\"MIT\"},\"contracts/Assets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <=0.8.19;\\r\\n\\r\\nimport \\\"./NFTVenture.sol\\\";\\r\\nimport \\\"./AssetStruct.sol\\\";\\r\\n\\r\\ncontract Assets {\\r\\n    NFTVenture private nftContract;\\r\\n    address public supervisor;\\r\\n\\r\\n    // Eventos\\r\\n    event LogInvestment(\\r\\n        address indexed investor,\\r\\n        uint256 indexed assetId,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 tokenAmount,\\r\\n        uint256 value\\r\\n    );\\r\\n\\r\\n    event AssetCreated(\\r\\n        uint256 indexed assetId,\\r\\n        address indexed owner,\\r\\n        string tokenURI\\r\\n    );\\r\\n\\r\\n    // Constructor\\r\\n    constructor(address nftAddress) {\\r\\n        nftContract = NFTVenture(nftAddress);\\r\\n        supervisor = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlySupervisor() {\\r\\n        require(\\r\\n            msg.sender == supervisor,\\r\\n            \\\"Only supervisor can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addAsset(\\r\\n        uint256 price,\\r\\n        string memory author,\\r\\n        string memory title,\\r\\n        string memory description,\\r\\n        uint256 projectEndDate,\\r\\n        address to,\\r\\n        string memory tokenURI,\\r\\n        string memory mainPhoto,\\r\\n        string[] memory secondaryPhotos,\\r\\n        Category category\\r\\n    ) public onlySupervisor {\\r\\n        require(price != 0, \\\"Price cannot be zero\\\");\\r\\n        require(\\r\\n            projectEndDate >= block.timestamp,\\r\\n            \\\"Project end date should be in the future\\\"\\r\\n        );\\r\\n        require(to != address(0), \\\"Address cannot be zero\\\");\\r\\n\\r\\n        uint256 assetId = nftContract.getAssetsCount();\\r\\n\\r\\n        Reward[] memory emptyRewards;\\r\\n        Asset memory newAsset = Asset(\\r\\n            assetId,\\r\\n            price,\\r\\n            author,\\r\\n            title,\\r\\n            description,\\r\\n            block.timestamp,\\r\\n            projectEndDate,\\r\\n            emptyRewards,\\r\\n            ProjectStatus.Started,\\r\\n            address(0),\\r\\n            mainPhoto,\\r\\n            secondaryPhotos,\\r\\n            category\\r\\n        );\\r\\n        nftContract._addAsset(assetId, newAsset, to);\\r\\n\\r\\n        nftContract.mint(to, assetId, tokenURI);\\r\\n\\r\\n        emit AssetCreated(assetId, to, tokenURI);\\r\\n\\r\\n        nftContract.incrementAssetsCount();\\r\\n    }\\r\\n\\r\\n    function getAllAssets(\\r\\n        ProjectStatus status\\r\\n    ) public view returns (Asset[] memory, uint256[] memory, uint256[] memory) {\\r\\n        uint256[] memory assetIds;\\r\\n\\r\\n        if (status == ProjectStatus.Started) {\\r\\n            assetIds = nftContract.getActiveAssets();\\r\\n        } else if (status == ProjectStatus.Funded) {\\r\\n            assetIds = nftContract.getFundedAssets();\\r\\n        } else if (status == ProjectStatus.Failed) {\\r\\n            assetIds = nftContract.getFailedAssets();\\r\\n        } else if (status == ProjectStatus.Completed) {\\r\\n            assetIds = nftContract.getCompletedAssets();\\r\\n        } else {\\r\\n            revert(\\\"Invalid status\\\");\\r\\n        }\\r\\n\\r\\n        uint256 assetCount = assetIds.length;\\r\\n        Asset[] memory assets = new Asset[](assetCount);\\r\\n        uint256[] memory investmentAmounts = new uint256[](assetCount);\\r\\n        uint256[] memory investorCounts = new uint256[](assetCount);\\r\\n\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            assets[i] = nftContract.getAsset(assetIds[i]);\\r\\n            investmentAmounts[i] = nftContract.getTotalInvestment(assetIds[i]);\\r\\n            investorCounts[i] = nftContract.getTotalInvestors(assetIds[i]);\\r\\n        }\\r\\n\\r\\n        return (assets, investmentAmounts, investorCounts);\\r\\n    }\\r\\n\\r\\n    function getAllAssetsByCategory(\\r\\n    ProjectStatus status,\\r\\n    Category category\\r\\n) public view returns (Asset[] memory) {\\r\\n    uint256[] memory allAssetIds;\\r\\n\\r\\n    if (status == ProjectStatus.Started) {\\r\\n        allAssetIds = nftContract.getActiveAssets();\\r\\n    } else if (status == ProjectStatus.Funded) {\\r\\n        allAssetIds = nftContract.getFundedAssets();\\r\\n    } else if (status == ProjectStatus.Failed) {\\r\\n        allAssetIds = nftContract.getFailedAssets();\\r\\n    } else if (status == ProjectStatus.Completed) {\\r\\n        allAssetIds = nftContract.getCompletedAssets();\\r\\n    } else {\\r\\n        revert(\\\"Invalid status\\\");\\r\\n    }\\r\\n\\r\\n    uint256[] memory categoryAssetIds = nftContract.getAssetsByCategory(category);\\r\\n    uint256 categoryAssetCount = categoryAssetIds.length;\\r\\n    Asset[] memory categoryAssets = new Asset[](categoryAssetCount);\\r\\n\\r\\n    uint256 assetIndex = 0;\\r\\n    for (uint256 i = 0; i < categoryAssetCount; i++) {\\r\\n        uint256 assetId = categoryAssetIds[i];\\r\\n        bool existsInAllAssets = false;\\r\\n        for (uint256 j = 0; j < allAssetIds.length; j++) {\\r\\n            if (allAssetIds[j] == assetId) {\\r\\n                existsInAllAssets = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (existsInAllAssets) {\\r\\n            categoryAssets[assetIndex] = nftContract.getAsset(assetId);\\r\\n            assetIndex++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    assembly {\\r\\n        mstore(categoryAssets, assetIndex)\\r\\n    }\\r\\n\\r\\n    return categoryAssets;\\r\\n}\\r\\n\\r\\n\\r\\n    function getAssetById(uint256 assetId) public view returns (Asset memory) {\\r\\n        return nftContract.getAsset(assetId);\\r\\n    }\\r\\n\\r\\n    function getAssetsOfOwner(\\r\\n        address owner\\r\\n    ) public view returns (Asset[] memory) {\\r\\n        uint256[] memory assetIds = nftContract.getAssetsOfOwner(owner);\\r\\n        uint256 assetCount = assetIds.length;\\r\\n        Asset[] memory assets = new Asset[](assetCount);\\r\\n\\r\\n        for (uint256 i = 0; i < assetCount; i++) {\\r\\n            assets[i] = nftContract.getAsset(assetIds[i]);\\r\\n        }\\r\\n\\r\\n        return assets;\\r\\n    }\\r\\n\\r\\n    function updateAsset(\\r\\n        uint256 assetId,\\r\\n        string memory mainPhoto,\\r\\n        string[] memory secondaryPhotos,\\r\\n        string memory description\\r\\n    ) public {\\r\\n        require(nftContract.exists(assetId), \\\"Asset does not exist\\\");\\r\\n        require(\\r\\n            nftContract.isApprovedOrOwner(msg.sender, assetId),\\r\\n            \\\"Not approved or owner\\\"\\r\\n        );\\r\\n\\r\\n        Asset memory asset = nftContract.getAsset(assetId);\\r\\n\\r\\n        asset.mainPhoto = bytes(mainPhoto).length > 0\\r\\n            ? mainPhoto\\r\\n            : asset.mainPhoto;\\r\\n        asset.secondaryPhotos = secondaryPhotos.length > 0\\r\\n            ? secondaryPhotos\\r\\n            : asset.secondaryPhotos;\\r\\n        asset.description = bytes(description).length > 0\\r\\n            ? description\\r\\n            : asset.description;\\r\\n\\r\\n        nftContract.updateAsset(assetId, asset);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x024d32187f7cf7df9dd87e7b52523c253e5be2632e75bbd308d08c7253d5a042\",\"license\":\"MIT\"},\"contracts/NFTVenture.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <=0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"./AssetStruct.sol\\\";\\n\\ncontract NFTVenture is\\n    ERC721,\\n    ERC721Enumerable,\\n    ERC721URIStorage,\\n    Pausable,\\n    Ownable,\\n    ERC721Burnable\\n{\\n    // Assets\\n    uint256 public assetsCount;\\n    mapping(uint256 => Asset) public assetMap;\\n    mapping(uint256 => bool) public assetExists;\\n\\n    mapping(address => uint256[]) public ownerToAssets;\\n\\n    mapping(uint256 => address) public assetApprovals;\\n    mapping(uint256 => address) public assetOwner;\\n    mapping(address => uint256) public ownedAssetsCount;\\n\\n    // State-based Asset IDs\\n    uint256[] public activeAssets;\\n    uint256[] public fundedAssets;\\n    uint256[] public failedAssets;\\n    uint256[] public completedAssets;\\n\\n    // Category-based Asset IDs\\n    mapping(Category => uint256[]) public categoryAssets;\\n\\n    // Investments\\n    mapping(uint256 => mapping(address => uint256)) public investmentAmountOf;\\n    mapping(uint256 => uint256) public investmentReceived;\\n    mapping(uint256 => address[]) public assetInvestors;\\n    mapping(uint256 => bool) public isTransferAllowed;\\n    mapping(uint256 => bool) public isRefundingAllowed;\\n    mapping(uint256 => uint256) public investmentRefunded;\\n    mapping(uint256 => mapping(address => uint256)) public pendingReturns;\\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256)))\\n        public investorTokens;\\n    mapping(uint256 => uint256) public totalInvestors;\\n    mapping(uint256 => uint256) public totalInvestment;\\n    mapping(address => uint256[]) public investorAssets;\\n\\n    // Constructor\\n    constructor() ERC721(\\\"FractionalCTV\\\", \\\"FCTV\\\") {}\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) whenNotPaused {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function _burn(\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    modifier isNFTOwner(uint256 assetId) {\\n        require(msg.sender == ownerOf(assetId));\\n        _;\\n    }\\n\\n    function balanceOf() public view returns (uint256) {\\n        require(\\n            msg.sender != address(0),\\n            \\\"ERC721: balance query for the zero address\\\"\\n        );\\n        return ownedAssetsCount[msg.sender];\\n    }\\n\\n    function ownerOf(\\n        uint256 assetId\\n    ) public view override(ERC721, IERC721) returns (address) {\\n        address owner = assetOwner[assetId];\\n        require(owner != address(0), \\\"NoAssetExists\\\");\\n        return owner;\\n    }\\n\\n    function approve(\\n        address to,\\n        uint256 assetId\\n    ) public override(ERC721, IERC721) {\\n        address owner = ownerOf(assetId);\\n        require(to != owner, \\\"CurrentOwnerApproval\\\");\\n        require(msg.sender == owner, \\\"NotTheAssetOwner\\\");\\n        assetApprovals[assetId] = to;\\n        emit Approval(owner, to, assetId);\\n    }\\n\\n    function getApproved(\\n        uint256 assetId\\n    ) public view override(ERC721, IERC721) returns (address) {\\n        require(\\n            _exists(assetId),\\n            \\\"ERC721: approved query for nonexistent token\\\"\\n        );\\n        return assetApprovals[assetId];\\n    }\\n\\n    function clearApproval(uint256 assetId, address approved) public {\\n        if (assetApprovals[assetId] == approved) {\\n            assetApprovals[assetId] = address(0);\\n        }\\n    }\\n\\n    function mint(address to, uint256 assetId, string memory asseturi) public {\\n        require(to != address(0), \\\"ZeroAddressMiniting\\\");\\n        _safeMint(to, assetId);\\n        _setTokenURI(assetId, asseturi);\\n        emit Transfer(address(0), to, assetId);\\n    }\\n\\n    function exists(uint256 assetId) public view returns (bool) {\\n        return assetExists[assetId];\\n    }\\n\\n    function isApprovedOrOwner(\\n        address spender,\\n        uint256 assetId\\n    ) external view returns (bool) {\\n        require(\\n            exists(assetId),\\n            \\\"ERC721: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(assetId);\\n        return (spender == owner || getApproved(assetId) == spender);\\n    }\\n\\n    function _addAsset(\\n        uint256 assetId,\\n        Asset memory asset,\\n        address to\\n    ) external {\\n        assetMap[assetId] = asset;\\n        assetOwner[assetId] = to;\\n        ownedAssetsCount[to]++;\\n        ownerToAssets[to].push(assetId);\\n        assetExists[assetId] = true;\\n        activeAssets.push(assetId);\\n        categoryAssets[asset.category].push(assetId);\\n    }\\n\\n    function getAsset(uint256 assetId) public view returns (Asset memory) {\\n        return assetMap[assetId];\\n    }\\n\\n    function updateAsset(uint256 assetId, Asset memory asset) public {\\n        assetMap[assetId] = asset;\\n    }\\n\\n    function getAssetsCount() public view returns (uint256) {\\n        return assetsCount;\\n    }\\n\\n    function incrementAssetsCount() public {\\n        assetsCount++;\\n    }\\n\\n    function getAssetsOfOwner(\\n        address owner\\n    ) public view returns (uint256[] memory) {\\n        return ownerToAssets[owner];\\n    }\\n\\n    function updateAssetReward(\\n        uint256 assetId,\\n        uint256 rewardIndex,\\n        uint256 newAvailableTokens\\n    ) external {\\n        require(\\n            rewardIndex < assetMap[assetId].rewards.length,\\n            \\\"Invalid reward index\\\"\\n        );\\n        assetMap[assetId]\\n            .rewards[rewardIndex]\\n            .availableTokens = newAvailableTokens;\\n    }\\n\\n    function handleRewardAddedToAsset(\\n        uint256 assetId,\\n        string memory title,\\n        string memory description,\\n        uint256 tokenAmount,\\n        uint256 individualPrice,\\n        bytes32 rewardId\\n    ) external {\\n        Asset storage asset = assetMap[assetId];\\n        asset.rewards.push(\\n            Reward({\\n                title: title,\\n                description: description,\\n                tokenAmount: tokenAmount,\\n                individualPrice: individualPrice,\\n                availableTokens: tokenAmount,\\n                rewardTokenId: uint256(rewardId)\\n            })\\n        );\\n    }\\n\\n    function updateRewardTokenAddress(\\n        uint256 assetId,\\n        address rewardTokenAddress\\n    ) external {\\n        assetMap[assetId].rewardTokenAddress = rewardTokenAddress;\\n    }\\n\\n    function addInvestment(\\n        uint256 assetId,\\n        address investor,\\n        uint256 amount\\n    ) external {\\n        investmentAmountOf[assetId][investor] += amount;\\n        investmentReceived[assetId] += amount;\\n        totalInvestment[assetId] += amount;\\n        if (investmentAmountOf[assetId][investor] == amount) {\\n            assetInvestors[assetId].push(investor);\\n            investorAssets[investor].push(assetId);\\n\\n            totalInvestors[assetId]++;\\n        }\\n    }\\n\\n    function getTotalInvestment(\\n        uint256 assetId\\n    ) external view returns (uint256) {\\n        return totalInvestment[assetId];\\n    }\\n\\n    function getTotalInvestors(\\n        uint256 assetId\\n    ) external view returns (uint256) {\\n        return totalInvestors[assetId];\\n    }\\n\\n    function addInvestor(uint256 assetId, address investor) external {\\n        assetInvestors[assetId].push(investor);\\n        investorAssets[investor].push(assetId);\\n    }\\n\\n    function getAssetInvestors(\\n        uint256 assetId\\n    ) external view returns (address[] memory) {\\n        return assetInvestors[assetId];\\n    }\\n\\n    function getInvestorAssets(\\n        address investor\\n    ) external view returns (uint256[] memory) {\\n        return investorAssets[investor];\\n    }\\n    function getInvestorTokens(\\n        uint256 assetId,\\n        address investor\\n    ) public view returns (uint256[] memory, uint256[] memory) {\\n        Asset memory asset = assetMap[assetId];\\n        uint256 rewardCount = asset.rewards.length;\\n\\n        uint256[] memory tokenIds = new uint256[](rewardCount);\\n        uint256[] memory tokenAmounts = new uint256[](rewardCount);\\n\\n        for (uint256 i = 0; i < rewardCount; i++) {\\n            uint256 tokenId = asset.rewards[i].rewardTokenId;\\n            tokenIds[i] = tokenId;\\n            tokenAmounts[i] = investorTokens[assetId][investor][tokenId];\\n        }\\n\\n        return (tokenIds, tokenAmounts);\\n    }\\n\\n    function getInvestmentAmount(\\n        uint256 assetId,\\n        address investor\\n    ) public view returns (uint256) {\\n        return investmentAmountOf[assetId][investor];\\n    }\\n\\n    function updateInvestorTokens(\\n        uint256 assetId,\\n        address investor,\\n        uint256 tokenId,\\n        uint256 tokenAmount\\n    ) external {\\n        investorTokens[assetId][investor][tokenId] = tokenAmount;\\n    }\\n\\n    function allowTransfers(uint256 assetId, bool allowed) external {\\n        isTransferAllowed[assetId] = allowed;\\n    }\\n\\n    function allowRefunding(uint256 assetId, bool allowed) external {\\n        isRefundingAllowed[assetId] = allowed;\\n    }\\n\\n    function updatePendingReturns(\\n        uint256 assetId,\\n        address investor,\\n        uint256 amount\\n    ) external {\\n        pendingReturns[assetId][investor] = amount;\\n    }\\n\\n    function updateInvestmentRefunded(\\n        uint256 assetId,\\n        uint256 amount\\n    ) external {\\n        investmentRefunded[assetId] = amount;\\n    }\\n\\n    function getActiveAssets() external view returns (uint256[] memory) {\\n        return activeAssets;\\n    }\\n\\n    function getFundedAssets() external view returns (uint256[] memory) {\\n        return fundedAssets;\\n    }\\n\\n    function getFailedAssets() external view returns (uint256[] memory) {\\n        return failedAssets;\\n    }\\n\\n    function getCompletedAssets() external view returns (uint256[] memory) {\\n        return completedAssets;\\n    }\\n\\n    function getAssetsByCategory(\\n        Category category\\n    ) external view returns (uint256[] memory) {\\n        return categoryAssets[category];\\n    }\\n}\\n\",\"keccak256\":\"0xfe8b84cc7cf611042e781969058a556bbdef20e9d3d6073a89df555c628fffc7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600090813560e01c92836338031123146100905750505080634663a28c1461008b5780635563633d1461008657806356e4b68b1461008157806386275c5a1461007c578063b3e444a7146100775763f3ab880e1461007257600080fd5b610fe3565b610f5c565b610e8f565b610e48565b610c0c565b610788565b3461040b57602091826003193601126104075781356100ae8161040f565b6100b78161051e565b806102d5575081846100d16100cc825461053a565b61053a565b83516301fb15dd60e31b815292839182905afa90811561026b5785916102b3575b50925b8351610100816115ff565b9461010a8261164f565b966101148361164f565b9581906101246100cc845461053a565b915b8581106101405787518061013c8b8e8e84610726565b0390f35b808461014f61016d93886116a6565b518a5180948192631d591eb760e31b83528783019190602083019252565b0381875afa801561026b576101c3928691610291575b5061018e828d6116a6565b52610199818c6116a6565b50876101a582886116a6565b518a51809481926334422a4760e01b83528783019190602083019252565b0381875afa91821561026b5761021292828e928892610270575b506101e891926116a6565b52876101f482886116a6565b518a5180948192631d6e430760e11b83528783019190602083019252565b0381875afa801561026b5761023992869161023e575b50610233828c6116a6565b52611681565b610126565b61025e9150893d8b11610264575b6102568183610ab1565b81019061148a565b8d610228565b503d61024c565b611499565b6101e8925061028b908c8d3d10610264576102568183610ab1565b916101dd565b6102ad91503d8088833e6102a58183610ab1565b8101906118a3565b8d610183565b6102cf91503d8087833e6102c78183610ab1565b810190611514565b856100f2565b6102de8161051e565b60018103610337575081846102f66100cc825461053a565b8351620dee2360e51b815292839182905afa90811561026b57859161031d575b50926100f5565b61033191503d8087833e6102c78183610ab1565b85610316565b6103408161051e565b6002810361037f575081846103586100cc825461053a565b8351630f4facc560e21b815292839182905afa90811561026b57859161031d5750926100f5565b8061038b60039261051e565b036103c657818461039f6100cc825461053a565b8351635aff92c160e11b815292839182905afa90811561026b57859161031d5750926100f5565b5162461bcd60e51b81529150819061040390820160609060208152600e60208201526d496e76616c69642073746174757360901b60408201520190565b0390fd5b8380fd5b8280fd5b6004111561041957565b600080fd5b60005b8381106104315750506000910152565b8181015183820152602001610421565b9060209161045a8151809281855285808601910161041e565b601f01601f1916010190565b908082519081815260208091019281808460051b8301019501936000915b8483106104945750505050505090565b9091929394958480600192601f198582030186528951906104d06104c0835160c0808552840190610441565b8484015183820386850152610441565b9160408082015190830152606080820151908301526080808201519083015260a0809101519101529801930193019194939290610484565b634e487b7160e01b600052602160045260246000fd5b6004111561052857565b610508565b9060048210156105285752565b6001600160a01b031690565b908082519081815260208091019281808460051b8301019501936000915b8483106105745750505050505090565b9091929394958480610592600193601f198682030187528a51610441565b9801930193019194939290610564565b9060058210156105285752565b9061069390825181526020830151602082015261068361066f61063461060e6105fc6105ea60408901516101a08060408a0152880190610441565b60608901518782036060890152610441565b60808801518682036080880152610441565b60a087015160a086015260c087015160c086015260e087015185820360e0870152610466565b610647610100808801519086019061052d565b610120868101516001600160a01b031690850152610140808701519085830390860152610441565b610160808601519084830390850152610546565b92610180809101519101906105a2565b90565b908082519081815260208091019281808460051b8301019501936000915b8483106106c45750505050505090565b90919293949584806106e2600193601f198682030187528a516105af565b98019301930191949392906106b4565b90815180825260208080930193019160005b828110610712575050505090565b835185529381019392810192600101610704565b9161074f906107416106939593606086526060860190610696565b9084820360208601526106f2565b9160408184039101526106f2565b6005111561041957565b61012435906107758261075d565b565b906020610693928181520190610696565b34610419576040806003193601126104195760048035916107a88361040f565b602435926107b58461075d565b6107be8161051e565b8061098457508160006107d46100cc825461053a565b83516301fb15dd60e31b815292839182905afa801561026b576108249160009161096b575b50935b600061080b6100cc825461053a565b9184518094819263a2311d5f60e01b83528883016119e1565b0381845afa91821561026b57600092610950575b50908051610845816115ff565b9460009384915b8383106108635785885286518061013c8a82610777565b9195909296949397610875878a6116a6565b5198600098895b8351811015610941578b61089082866116a6565b51146108a45761089f90611681565b61087c565b50959698509196909860015b6108c9575b506108bf90611681565b919392909361084c565b8751631d591eb760e31b815284810191825291969190600090829081906020010381885afa91821561026b576108bf9261092192600091610928575b50610910828c6116a6565b5261091b818b6116a6565b50611681565b95906108b5565b61093b913d8091833e6102a58183610ab1565b38610905565b509596989990929791996108b0565b61096491923d8091833e6102c78183610ab1565b9038610838565b61097e913d8091833e6102c78183610ab1565b386107f9565b61098d8161051e565b600181036109ea57508160006109a66100cc825461053a565b8351620dee2360e51b815292839182905afa801561026b57610824916000916109d1575b50936107fc565b6109e4913d8091833e6102c78183610ab1565b386109ca565b6109f38161051e565b60028103610a375750816000610a0c6100cc825461053a565b8351630f4facc560e21b815292839182905afa801561026b57610824916000916109d15750936107fc565b80610a4360039261051e565b036103c657816000610a586100cc825461053a565b8351635aff92c160e11b815292839182905afa801561026b57610824916000916109d15750936107fc565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111610aac57604052565b610a83565b601f909101601f19168101906001600160401b03821190821017610aac57604052565b604051906101a082016001600160401b03811183821017610aac57604052565b6040519060c082016001600160401b03811183821017610aac57604052565b6001600160401b038111610aac57601f01601f191660200190565b81601f8201121561041957803590610b4582610b13565b92610b536040519485610ab1565b8284526020838301011161041957816000926020809301838601378301015290565b6001600160401b038111610aac5760051b60200190565b9080601f8301121561041957813590610ba482610b75565b92610bb26040519485610ab1565b828452602092838086019160051b8301019280841161041957848301915b848310610be05750505050505090565b82356001600160401b038111610419578691610c0184848094890101610b2e565b815201920191610bd0565b346104195760803660031901126104195760048035906001600160401b0360243581811161041957610c419036908401610b2e565b60443582811161041957610c589036908501610b8c565b9160643590811161041957610c709036908501610b2e565b600094610c806100cc875461053a565b91604051634f558e7960e01b8152602090818180610ca5878c83019190602083019252565b0381885afa801561026b57610cc1918a91610e20575b50611a09565b6040805163430c208160e01b815233898201908152602081018690529091839183918291010381885afa90811561026b57610d04928a92610df3575b5050611a4c565b60405194631d591eb760e31b8652878680610d26868b83019190602083019252565b0381875afa94851561026b5788968796610dd7575b50805115610dcb575b610140860152805115610dbf575b610160850152805115610db4575b6080840152813b156104075783610d8c9560405196879586948593631c29952960e31b85528401611a90565b03925af1801561026b57610d9e575080f35b80610dab610db192610a99565b80610e3d565b80f35b506080830151610d60565b50610160840151610d52565b50610140850151610d44565b610dec9196503d8089833e6102a58183610ab1565b9438610d3b565b610e129250803d10610e19575b610e0a8183610ab1565b8101906119f1565b3880610cfd565b503d610e00565b610e379150833d8511610e1957610e0a8183610ab1565b38610cbb565b600091031261041957565b34610419576000366003190112610419576001546040516001600160a01b039091168152602090f35b6001600160a01b0381160361041957565b60a4359061077582610e71565b3461041957610140366003190112610419576001600160401b0360243581811161041957610ec260049136908301610b2e565b9060443583811161041957610eda9036908301610b2e565b9060643584811161041957610ef29036908301610b2e565b90610efb610e82565b60c43586811161041957610f129036908401610b2e565b9160e43587811161041957610f2a9036908301610b2e565b936101043597881161041957610f46610f5a9836908401610b8c565b95610f4f610767565b976084359335611110565b005b3461041957602036600319011261041957610f7561158d565b5060008054604051631d591eb760e31b815260048035908201529190829060249082906001600160a01b03165afa801561026b5761013c91600091610fca575b506040519182916020835260208301906105af565b610fdd913d8091833e6102a58183610ab1565b38610fb5565b3461041957602036600319011261041957611045600480359061100582610e71565b60006110146100cc825461053a565b604080516379d5c40760e11b81526001600160a01b0390951684860190815294959094839187918291602090910190565b0381845afa94851561026b5782956110f4575b50845192611065846115ff565b95835b85811061107c5786518061013c8a82610777565b808561108b6110a993856116a6565b51895180948192631d591eb760e31b83528883019190602083019252565b0381885afa801561026b576110d59287916110da575b506110ca828b6116a6565b5261091b818a6116a6565b611068565b6110ee91503d8089833e6102a58183610ab1565b386110bf565b6111099195503d8084833e6102c78183610ab1565b9338611058565b959493969891929897909760018060a01b0380600154163303611351576111388815156113a5565b611144428a10156113e8565b851697611152891515611445565b60009a6111626100cc8d5461053a565b9560409b8c51630aac5dfd60e01b81526020816004818c5afa9b8c1561026b578f918f929d61131b575b50916111ed979593918d999795936111a2610ad4565b9a8b5260208b0152890152606088015260808701524260a087015260c0860152606060e08601528b6101008601528b61012086015261014085015261016084015261018083016114a5565b813b156113175782611218928992838a51809681958294631b8513e960e31b84528c600485016114b1565b03925af1801561026b57611304575b506112356100cc875461053a565b90813b1561130057826112639392858980948a51978895869485936334ff261960e21b8552600485016114df565b03925af190811561026b577f49b4e4c6879cdc85b51d8c3b572252aaa7842edb863810854acb6d2ed420d962926112a5926112ed575b50855191829182611503565b0390a36112b56100cc835461053a565b90813b1561040b5790600483925180948193632c5bdb1f60e01b83525af1801561026b576112e05750565b80610dab61077592610a99565b80610dab6112fa92610a99565b38611299565b8680fd5b80610dab61131192610a99565b38611227565b8780fd5b6111ed989694929d506113419060209a989694929a3d8111610264576102568183610ab1565b9c9193959798909294969861118c565b60405162461bcd60e51b815260206004820152602660248201527f4f6e6c792073757065727669736f722063616e2063616c6c20746869732066756044820152653731ba34b7b760d11b6064820152608490fd5b156113ac57565b60405162461bcd60e51b815260206004820152601460248201527350726963652063616e6e6f74206265207a65726f60601b6044820152606490fd5b156113ef57565b60405162461bcd60e51b815260206004820152602860248201527f50726f6a65637420656e6420646174652073686f756c6420626520696e207468604482015267652066757475726560c01b6064820152608490fd5b1561144c57565b60405162461bcd60e51b8152602060048201526016602482015275416464726573732063616e6e6f74206265207a65726f60501b6044820152606490fd5b90816020910312610419575190565b6040513d6000823e3d90fd5b60058210156105285752565b916114cf9060409295949584526060602085015260608401906105af565b6001600160a01b03909416910152565b610693939260609260018060a01b0316825260208201528160408201520190610441565b906020610693928181520190610441565b6020908181840312610419578051906001600160401b03821161041957019180601f8401121561041957825161154981610b75565b936115576040519586610ab1565b818552838086019260051b820101928311610419578301905b82821061157e575050505090565b81518152908301908301611570565b604051906101a082016001600160401b03811183821017610aac5760405281610180600091828152826020820152606080604083015280808301528060808301528360a08301528360c08301528060e08301528361010083015283610120830152806101408301526101608201520152565b9061160982610b75565b6116166040519182610ab1565b8281528092611627601f1991610b75565b019060005b82811061163857505050565b60209061164361158d565b8282850101520161162c565b9061165982610b75565b6116666040519182610ab1565b8281528092611677601f1991610b75565b0190602036910137565b60001981146116905760010190565b634e487b7160e01b600052601160045260246000fd5b80518210156116ba5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b81601f820112156104195780516116e681610b13565b926116f46040519485610ab1565b8184526020828401011161041957610693916020808501910161041e565b81601f8201121561041957805161172881610b75565b9260409161173883519586610ab1565b808552602093848087019260051b8201019383851161041957858201925b858410611767575050505050505090565b83516001600160401b03908181116104195784019160c09283601f19828a03011261041957611794610af4565b908a81015184811161041957898c6117ae928401016116d0565b825285810151938411610419578a946117cc8a8780978501016116d0565b858401526060918281015188850152608092838201519085015260a0928382015190850152015190820152815201930192611756565b51906107758261040f565b519061077582610e71565b9080601f830112156104195781519061183082610b75565b9261183e6040519485610ab1565b828452602092838086019160051b8301019280841161041957848301915b84831061186c5750505050505090565b82516001600160401b03811161041957869161188d848480948901016116d0565b81520192019161185c565b51906107758261075d565b906020828203126104195781516001600160401b03928382116104195701906101a082820312610419576118d5610ad4565b928251845260208301516020850152604083015181811161041957826118fc9185016116d0565b6040850152606083015181811161041957826119199185016116d0565b6060850152608083015181811161041957826119369185016116d0565b608085015260a083015160a085015260c083015160c085015260e08301518181116104195782611967918501611712565b60e085015261010061197a818501611802565b9085015261012061198c81850161180d565b908501526101408084015182811161041957836119aa9186016116d0565b908501526101609182840151918211610419576119c8918401611818565b908301526119da610180809201611898565b9082015290565b60208101929161077591906105a2565b90816020910312610419575180151581036104195790565b15611a1057565b60405162461bcd60e51b8152602060048201526014602482015273105cdcd95d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b15611a5357565b60405162461bcd60e51b81526020600482015260156024820152742737ba1030b8383937bb32b21037b91037bbb732b960591b6044820152606490fd5b6040906106939392815281602082015201906105af56fea2646970667358221220433ace17b2f15923f0a9f92d64fe064def01a83fad0bbf5e412c239dd99922a164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4661,
        "contract": "contracts/Assets.sol:Assets",
        "label": "nftContract",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(NFTVenture)7139"
      },
      {
        "astId": 4663,
        "contract": "contracts/Assets.sol:Assets",
        "label": "supervisor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(NFTVenture)7139": {
        "encoding": "inplace",
        "label": "contract NFTVenture",
        "numberOfBytes": "20"
      }
    }
  }
}